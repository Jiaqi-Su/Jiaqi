<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python每日一谈｜No.1.学习所需资源</title>
    <url>/2021/02/21/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.1/</url>
    <content><![CDATA[<p>-</p>
<blockquote>
<p>Hi, 大家好。</p>
<p>开这个专栏是因为大家想学，而且，基本不需要更新的问题。</p>
<p>我们会从基础开始进行教学，继而进行安装，包使用，编程等等。</p>
<p>由于是总结以及教学方面，我会参考各种教程，如有引用，必定开源(本教程遵循MIT协议)。</p>
<p>当然，我们的实例重点是偏向于python使用与结构生物学，CADD，化学信息学等方面的使用。</p>
<p>（毕竟爬PubChem，也算爬虫的一种）</p>
<p>最终会提供几个实例，作为结尾，说到这里，又应该开一个仓库了。</p>
<p>(Typora + Gitee)[<a href="https://zhuanlan.zhihu.com/p/349427506]%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%9F%F0%9F%98%8E">https://zhuanlan.zhihu.com/p/349427506]自动上传了解一下？😎</a></p>
</blockquote>
<h3 id="官网：https-www-python-org"><a href="#官网：https-www-python-org" class="headerlink" title="官网：https://www.python.org/"></a>官网：<a href="https://www.python.org/">https://www.python.org/</a></h3><h3 id="版本："><a href="#版本：" class="headerlink" title="版本："></a>版本：</h3><p> Python 2.x 和 Python 3.x</p>
<p>本次教程使用<strong>Python 3.x</strong></p>
<h3 id="教程："><a href="#教程：" class="headerlink" title="教程："></a>教程：</h3><ol>
<li>廖雪峰：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">https://www.liaoxuefeng.com/wiki/1016959663602400</a></li>
<li>中文翻译：<a href="https://docs.python.org/zh-cn/3/tutorial/index.html">https://docs.python.org/zh-cn/3/tutorial/index.html</a></li>
<li>菜鸟教程：<a href="https://www.runoob.com/">https://www.runoob.com/</a></li>
</ol>
<h3 id="Github"><a href="#Github" class="headerlink" title="Github:"></a>Github:</h3><ol>
<li>Python算法实现：<a href="https://github.com/TheAlgorithms/Python">https://github.com/TheAlgorithms/Python</a></li>
<li>100天从新手到大纲：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li>
<li>Python Data Science 手书：<a href="https://github.com/jakevdp/PythonDataScienceHandbook">https://github.com/jakevdp/PythonDataScienceHandbook</a></li>
<li>机器学习100天：<a href="https://github.com/MLEveryday/100-Days-Of-ML-Code">https://github.com/MLEveryday/100-Days-Of-ML-Code</a></li>
<li>一些很漂亮的python应用：<a href="https://github.com/mahmoud/awesome-python-applications">https://github.com/mahmoud/awesome-python-applications</a></li>
<li>中文python笔记：<a href="https://github.com/lijin-THU/notes-python">https://github.com/lijin-THU/notes-python</a></li>
<li>pyhton初学者：<a href="https://github.com/Yixiaohan/codeparkshare">https://github.com/Yixiaohan/codeparkshare</a></li>
<li>慕课网的实战课程“C++算法与数据结构精讲“的全python实现：<a href="https://github.com/ShiveryMoon/Imooc-Algorithm-PythonEdition">https://github.com/ShiveryMoon/Imooc-Algorithm-PythonEdition</a></li>
</ol>
<h3 id="书籍："><a href="#书籍：" class="headerlink" title="书籍："></a>书籍：</h3><ol>
<li><p>Python编程 从入门到实践</p>
</li>
<li><p>“笨办法”学Python(第3版)</p>
</li>
<li><p>图灵程序设计丛书:Python基础教程(第2版)</p>
</li>
<li><p>BEST PYTHON BOOKS：<a href="https://pythonbooks.org/">https://pythonbooks.org</a></p>
</li>
</ol>
<h3 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h3><ol>
<li>mooc Python语言程序设计: <a href="https://www.icourse163.org/course/BIT-268001#/info">https://www.icourse163.org/course/BIT-268001#/info</a></li>
<li>mooc 高级语言程序设计(python) : <a href="https://www.icourse163.org/course/HIT-9003">https://www.icourse163.org/course/HIT-9003</a></li>
<li>YouTube Python零基础入门教程5小时完整版(2020年最新版):<a href="https://www.youtube.com/watch?v=yMOU8_hhLL8">https://www.youtube.com/watch?v=yMOU8_hhLL8</a></li>
<li>YouTube Python程序设计入门：<a href="https://www.youtube.com/watch?v=wqRlKVRUV_k&amp;list=PL-g0fdC5RMboYEyt6QS2iLb_1m7QcgfHk">https://www.youtube.com/watch?v=wqRlKVRUV_k&amp;list=PL-g0fdC5RMboYEyt6QS2iLb_1m7QcgfHk</a></li>
</ol>
<h3 id="IDE-集成开发环境"><a href="#IDE-集成开发环境" class="headerlink" title="IDE(集成开发环境):"></a>IDE(集成开发环境):</h3><ol>
<li>PyCharm:<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></li>
<li>Jupyter Notebook:<a href="https://jupyter.org/">https://jupyter.org</a></li>
<li>Ipython:<a href="https://ipython.org/">https://ipython.org/</a></li>
<li>Conda:<a href="https://conda.io/">https://conda.io</a></li>
<li>VS Code:<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li>
<li>Atom:<a href="https://atom.io/">https://atom.io/</a></li>
<li>Sublime Text:<a href="https://www.sublimetext.com/">https://www.sublimetext.com</a></li>
<li>Spyder:<a href="https://www.spyder-ide.org/">https://www.spyder-ide.org/</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.10.迭代器</title>
    <url>/2021/03/01/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.10/</url>
    <content><![CDATA[<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器呢，是一种<strong>对象</strong>。。。。</p>
<blockquote>
<p>我如何和你们解释<strong>对象</strong>这个比较抽象的词呢（在某些同学仍然单身的情况下hhh）</p>
</blockquote>
<blockquote>
<p>言归正传，编程可以分为两类，面向过程的编程，以及面向对象的编程</p>
</blockquote>
<blockquote>
<p>我们写的一般普通的脚本是面向过程的，因为，处理问题比较简单，应用情景比较单一</p>
</blockquote>
<blockquote>
<p>但是如果对于比较复杂的操作一般会使用面向对象的编程</p>
</blockquote>
<blockquote>
<p>当然，你也可以记住一句话</p>
</blockquote>
<blockquote>
<p><strong>万物皆对象</strong></p>
</blockquote>
<p>为了更细致的了解,迭代器，我们先来给他下定义</p>
<ol>
<li>迭代器是可迭代的对象</li>
<li>迭代器只能往前不会后退。</li>
<li>迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong></li>
<li>字符串，列表，元组，字典对象都可用于创建迭代器</li>
<li>你也可以使用循环来进行遍历</li>
</ol>
<p>简而言之，一个字符串，列表或元组被迭代化后，他就变成了一个迭代器类似的存在，迭代器可以进行迭代，且只能向前不能向后</p>
<p>我们看个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a=<span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="built_in">type</span>(b)</span><br><span class="line">Out[<span class="number">10</span>]: str_iterator</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">&#x27;d&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">9</span>-adb3e17b0219&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然列表，元祖也基本一致</span></span><br><span class="line">In [<span class="number">11</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: b = <span class="built_in">iter</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: print(b)</span><br><span class="line">&lt;list_iterator <span class="built_in">object</span> at <span class="number">0x7fc9b8337ed0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">18</span>-adb3e17b0219&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#当然，如果是字典的话</span></span><br><span class="line">In [<span class="number">19</span>]: a=&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: <span class="built_in">iter</span>(a)</span><br><span class="line">Out[<span class="number">20</span>]: &lt;dict_keyiterator at <span class="number">0x7fc9b8331170</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: d = <span class="built_in">iter</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="built_in">next</span>(d)</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="built_in">next</span>(d)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: <span class="built_in">next</span>(d)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">24</span>-9b2daf1403f5&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(d)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用循环来进行遍历</span></span><br><span class="line">In [<span class="number">20</span>]: b = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>



<p>那其实现在，我们就有一个问题，为什么要用迭代器呢？</p>
<p>话说直接使用<code>for</code>，<code>while</code>循环遍历他不香吗？</p>
<p>一方面，同学们要了解，迭代的思想和精髓呀，这个你们高中老师就教过了，我就不教了，我们下一谈来直接写一个看看。</p>
<p>第二方面，迭代器所占的内存更小，我们看个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">33</span>]: <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]:  print(sys.getsizeof(a))</span><br><span class="line"><span class="number">112</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: b = <span class="built_in">iter</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: print(sys.getsizeof(b))</span><br><span class="line"><span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我们使用两种方式创建了a，这个列表，一种是正常方式</span></span><br><span class="line"><span class="comment">#一种是正常方式，在正常方式下，a所占的内存为112字节</span></span><br><span class="line"><span class="comment">#一种是迭代器方式，a所占的内存的为64字节</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，<strong>迭代器比较香是因为它占据的内存比较小</strong></p>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.12.列表生成式.1</title>
    <url>/2021/03/03/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.12.%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="额"><a href="#额" class="headerlink" title="额"></a>额</h3><p>竟然就到了函数，为什么这么快，我。。。是不是落了一些hh</p>
<p>来看一个我经常使用的方式</p>
<p>**列表生成式 **</p>
<p>一般来说我们如果要创建一个列表的话，那么可选的方案有</p>
<ol>
<li><p>直接定义列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li>
<li><p>将其余数据结构直接列表化</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: b = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">type</span>(b)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="built_in">tuple</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: c = <span class="built_in">list</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">type</span>(c)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: print(c)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>先创建一个空列表，然后往里面塞元素</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">8</span>]: d = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">   ...:     d.append(i)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: d</span><br><span class="line">Out[<span class="number">10</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">type</span>(d)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="built_in">list</span></span><br></pre></td></tr></table></figure>



<p>但是python提供了一个更为强大的列表生成方案</p>
<p>他的一般形式是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列表 &#x3D; [表达式 for i in 列表]</span><br></pre></td></tr></table></figure>

<p>当然你也可以复杂一点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列表 &#x3D; [表达式 for i in 列表 判断式]</span><br></pre></td></tr></table></figure>

<p>那么我们就可以这样使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">12</span>]: a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: a</span><br><span class="line">Out[<span class="number">13</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">14</span>]: a = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a</span><br><span class="line">Out[<span class="number">15</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>甚至于这样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">16</span>]: a = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>) <span class="keyword">if</span> i &gt; <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: a</span><br><span class="line">Out[<span class="number">17</span>]: [<span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.11.函数</title>
    <url>/2021/03/03/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.11.%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>手写一个迭代器，不要傻了，在你连函数都不会定义的情况下，我教你手写一个迭代器那是作死。</p>
<p>迭代器在后方</p>
<p>我们现在来看看<strong>函数,function</strong>定义</p>
<p>啥子叫个函数嘞</p>
<p>先来看看我对他的简化版定义</p>
<p><strong>当你写的代码太过复杂，不易被管理时，我们对代码所用的一种优化，一种代码的简洁结构</strong></p>
<p>当然他有一定的规则，来看看函数定义的规则(大部分摘自：<a href="https://www.runoob.com/python3/python3-function.html)%EF%BC%9A">https://www.runoob.com/python3/python3-function.html)：</a></p>
<ul>
<li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称(就是下面的那个max)和圆括号 <code>()</code>，后面再加个冒号<code>:</code>。</li>
<li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li>
<li>函数内容有缩进。</li>
<li>使用<code>return</code> 结束函数，函数会返回一个值，结束时不带return的话相当于返回 None。</li>
</ul>
<p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/py-tup-10-26-1.png" alt="img"></p>
<h4 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line"></span><br><span class="line">	函数</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span></span><br></pre></td></tr></table></figure>



<h3 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h3><p>仍然是<code>hellow world!</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: <span class="function"><span class="keyword">def</span> <span class="title">hw</span>(<span class="params">words</span>):</span></span><br><span class="line">    ...: 		 print(words)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: hw(<span class="string">&#x27;Hellow World!&#x27;</span>)</span><br><span class="line">Hellow World!</span><br></pre></td></tr></table></figure>

<p>然后让我们看看有<code>return</code>的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">13</span>]: <span class="function"><span class="keyword">def</span> <span class="title">plus</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    ...:     c = a + b</span><br><span class="line">    ...:     <span class="keyword">return</span> c</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: plus(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: d = plus(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: d</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>当然<code>return</code>在一个函数中也可以多次使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">72</span>]: <span class="function"><span class="keyword">def</span> <span class="title">pick_max</span>(<span class="params">a,b</span>):</span> </span><br><span class="line">    ...:     <span class="keyword">if</span> a &gt; b : </span><br><span class="line">    ...:         <span class="keyword">return</span> a </span><br><span class="line">    ...:     <span class="keyword">else</span>: </span><br><span class="line">    ...:         <span class="keyword">return</span> b </span><br><span class="line">    ...:                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: pick_max(<span class="number">1</span>,<span class="number">2</span>)                                                                                                                                     </span><br><span class="line">Out[<span class="number">73</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: c = pick_max(<span class="number">1</span>,<span class="number">2</span>)                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: c                                                                                                                                                 </span><br><span class="line">Out[<span class="number">75</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure>



<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>我们来看下传参</p>
<ol>
<li><p>必须参数</p>
<p>你函数定义了一个参数，此函数必须要有相对应地参数否则运行便会报错</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">20</span>]: <span class="function"><span class="keyword">def</span> <span class="title">hw</span>(<span class="params">words</span>):</span></span><br><span class="line">    ...:     print(words)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: hw()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">21</span>-9982e5434f2d&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 hw()</span><br><span class="line"></span><br><span class="line">TypeError: hw() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;words&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>默认参数</p>
<p>我们有时会给参数加一些默认值，如果运行函数时传入修改的参数的话，那么函数一般运行便会使用默认值</p>
<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: <span class="function"><span class="keyword">def</span> <span class="title">hw</span>(<span class="params">a,b,c = <span class="number">5</span></span>):</span></span><br><span class="line">    ...:     print(a)</span><br><span class="line">    ...:     print(b)</span><br><span class="line">    ...:     print(c)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: hw(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: hw(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li><p>可变参数</p>
<p>顾名思义，可变参数就是参数的个数是可变的，可以是1个也可以是n个</p>
<p>一般使用<code>*参数名</code>来进行表示,有时候你会常常看到这种形式<code>*args</code></p>
<p><code>*</code>参数用于解包tuple对象的每个元素，作为一个一个的位置参数传入到函数中</p>
<p>来举个例子，我想要计算（1，2，3，4）之间的加和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    ...:     <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    ...:     <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">    ...:         <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    ...:     <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">55</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*args</span>):</span></span><br><span class="line">    ...:     <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    ...:     <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">    ...:         <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    ...:     <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]:   calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">31</span>]: <span class="number">30</span></span><br></pre></td></tr></table></figure>



<p>如果我们有一个列表或者元祖，如和进行传参呢</p>
<p>例如： a = [1,2,3,4]</p>
<p>这样？<code>calc(a[0],a[1],a[2],a[3])</code></p>
<p>虽然可行，但是太过赘述，python中容许在列表或者元祖前加<code>*</code>，将其作为可变参数传入</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">32</span>]: <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*args</span>):</span></span><br><span class="line">    ...:     <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    ...:     <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">    ...:         <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    ...:     <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: calc(*a)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">30</span></span><br></pre></td></tr></table></figure>

<p>还有另外一种形式<code>**karg</code>,使用这种形式参数在函数内部组装为一个dict。</p>
<p>我们来看个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">39</span>]: <span class="function"><span class="keyword">def</span> <span class="title">see</span>(<span class="params">**kw</span>):</span></span><br><span class="line">    ...:     print(kw)</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: see(a = <span class="number">1</span>,b = <span class="number">2</span>,c = <span class="number">3</span>,d = <span class="number">4</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>命名关键字参数</p>
<p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。</p>
<p>但是，我们需要检查某些关键字，以便查看使用者输入的参数是否是正确的。</p>
<p>。。。</p>
<p>把自己当作那些一无所知的用户吧，为他们设身处地的想想。</p>
<p>我们需要检查，用户的参数输入是否符合我们的标准</p>
<p>形式为<code>*,关键字,关键字</code></p>
<p>例如：我们需要检查用户是否输入了<code>id</code>,<code>smi</code>这两个参数，化学信息学初步引入hhh</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">45</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">*,<span class="built_in">id</span>,smi</span>):</span></span><br><span class="line">    ...:     print(<span class="built_in">id</span>,smi)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: get(<span class="built_in">id</span>=<span class="number">1</span>,smi=<span class="string">&#x27;c1ccccc1&#x27;</span>)</span><br><span class="line"><span class="number">1</span> c1ccccc1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果缺少id</span></span><br><span class="line">In [<span class="number">47</span>]: get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">47</span>-f3ae4c96f67d&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 get(id=1)</span><br><span class="line"></span><br><span class="line">TypeError: get() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;smi&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果缺少smi</span></span><br><span class="line">In [<span class="number">48</span>]: get(smi = <span class="string">&#x27;c1ccccc1&#x27;</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">48</span>-988e95298c74&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 get(smi = &#x27;c1ccccc1&#x27;)</span><br><span class="line"></span><br><span class="line">TypeError: get() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;id&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>参数组合</p>
<p>额，我就假设你们对前面的内容理解了</p>
<p>阿弥陀佛</p>
<p>我们已知有上述几种参数的形式，那么在定义函数的时候，这些参数是否是有顺序的呢</p>
<p>答案是有的</p>
<p><strong>参数的顺序必须是：必须参数、默认参数、可变参数/命名关键字参数和关键字参数</strong></p>
<p>详细可以看：<a href="https://www.jianshu.com/p/98f7e34845b5">https://www.jianshu.com/p/98f7e34845b5</a></p>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里简单引入驼峰命名法，其实就是justdo不好看hhh</span></span><br><span class="line"><span class="comment"># 驼峰命名法：https://baike.baidu.com/item/骆驼命名法</span></span><br><span class="line">In [<span class="number">49</span>]: <span class="function"><span class="keyword">def</span> <span class="title">just_do</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span></span><br><span class="line">    ...:     print(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]:  just_do(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">&#x27;ext&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.13.列表生成式.2</title>
    <url>/2021/03/04/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.13.%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</url>
    <content><![CDATA[<p> 上篇我们说到了列表生成式</p>
<p>你可以很简单的通过</p>
<p><code>a = [i for i in b]</code></p>
<p>来搭建一个列表</p>
<p><strong>但是，问题还在于内存</strong>，是不是有种熟悉的味道</p>
<p>是的，你可以在生成列表之后使用迭代器来减少内存</p>
<p>其实方法很简单，<del>我是为了水文才拆成了两篇</del>,怕你们记不住</p>
<p>我们只需要将<code>[]</code>修改为<code>()</code>便可以直接生成一个迭代器</p>
<p>我们看个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: sys.getsizeof(a)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">9032</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: b = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: sys.getsizeof(b)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">128</span></span><br></pre></td></tr></table></figure>



<p>我们生成迭代器之后的使用方法和原来的一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>当然，你也可以通过循环来进行调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">20</span>]: b = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>好，水文结束，大家早午晚安</p>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.14.模块(包)的使用</title>
    <url>/2021/03/05/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.14.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>本来打算写类的，但是想了下，写一个类然后打包发布，对于使用者来说难度有点大</p>
<p>所以我们就简单介绍一下包的使用和安装，足够大家使用就好</p>
<p><strong>python的一大优势就是有很多的第三方包</strong></p>
<ul>
<li><p>蛋白设计：PyRosetta等</p>
</li>
<li><p>化学信息学：Rdkit，PyBel，ODDT等</p>
</li>
<li><p>生物信息学：BioPython，Dash Bio等</p>
</li>
<li><p>AI：Sklearn，Tensorflow，PyTorch等</p>
</li>
</ul>
<p>当你熟练的使用这些包的时候，就可以很方便的使用各个学科的相关知识，降低你的入门难度，</p>
<p>而一些，你只需要输入**<code>import everything</code>**就可以实现</p>
<p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/OIP.eTnkGiSxg4Ri-FmUNTGIgwHaEh.jpeg" alt="OIP.eTnkGiSxg4Ri-FmUNTGIgwHaEh"></p>
<p>我们先来看下python自带的一些包</p>
<p>python内置了一些很有用的模块</p>
<p>几个例子，<code>os, sys,time</code>等</p>
<p>我们看下使用</p>
<p>以<a href="https://www.runoob.com/python/os-file-methods.html">os</a>为例</p>
<p>os是<code>operating system</code>的缩写，他是python与系统进行交互的接口</p>
<p>我们来看几个常见的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先import</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#获取当前路径</span></span><br><span class="line">In [<span class="number">2</span>]: os.getcwd()</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;/Users/user&#x27;</span></span><br><span class="line"><span class="comment">#显示当前路径下的目录和文件列表</span></span><br><span class="line">In [<span class="number">3</span>]: os.listdir()</span><br><span class="line">Out[<span class="number">3</span>]:</span><br><span class="line">[<span class="string">&#x27;1S2d.pdb&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;knime&#x27;</span>]</span><br><span class="line"><span class="comment"># 更改工作目录</span></span><br><span class="line">In [<span class="number">5</span>]: os.chdir(<span class="string">&#x27;Public/&#x27;</span>)</span><br><span class="line"><span class="comment"># 如果你想看os的相关帮助的话</span></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">help</span>(os)</span><br><span class="line">Help on module os:</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    os - OS routines <span class="keyword">for</span> NT <span class="keyword">or</span> Posix depending on what system we<span class="string">&#x27;re on.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MODULE REFERENCE</span></span><br><span class="line"><span class="string">    https://docs.python.org/3.8/library/os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The following documentation is automatically generated from the Python</span></span><br><span class="line"><span class="string">    source files.  It may be incomplete, incorrect or include features that</span></span><br><span class="line"><span class="string">    are considered implementation detail and may vary between Python</span></span><br><span class="line"><span class="string">    implementations.  When in doubt, consult the module reference at the</span></span><br><span class="line"><span class="string">    location listed above.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br><span class="line"><span class="string">    This exports:</span></span><br><span class="line"><span class="string">      - all functions from posix or nt, e.g. unlink, stat, etc.</span></span><br><span class="line"><span class="string">      - os.path is either posixpath or ntpath</span></span><br><span class="line"><span class="string">      - os.name is either &#x27;</span>posix<span class="string">&#x27; or &#x27;</span>nt<span class="string">&#x27;</span></span><br><span class="line"><span class="string">      - os.curdir is a string representing the current directory (always &#x27;</span>.<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.pardir is a string representing the parent directory (always &#x27;</span>..<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.sep is the (or a most common) pathname separator (&#x27;</span>/<span class="string">&#x27; or &#x27;</span>\\<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.extsep is the extension separator (always &#x27;</span>.<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.altsep is the alternate pathname separator (None or &#x27;</span>/<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># 或者只是想看下os这个模块中定义过的函数或者变量</span></span><br><span class="line"><span class="string">In [10]: dir(os)</span></span><br><span class="line"><span class="string">Out[10]:</span></span><br><span class="line"><span class="string">[&#x27;</span>CLD_CONTINUED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>CLD_DUMPED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>CLD_EXITED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>CLD_TRAPPED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>DirEntry<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_CANTCREAT<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_CONFIG<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_DATAER<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_IOER<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOHOST<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOINPUT<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOPERM<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOUSE<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_OK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_OSER<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_OSFILE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_PROTOCOL<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_SOFTWARE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_TEMPFAIL<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_UNAVAILABLE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_USAGE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_LOCK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_OK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_TEST<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_TLOCK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_ULOCK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>MutableMapping<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>NGROUPS_MAX<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>O_ACCMODE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>O_APPEND<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure>








]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.15.模块(包)的安装</title>
    <url>/2021/03/06/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.15.%E6%A8%A1%E5%9D%97(%E5%8C%85)%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>上一谈中我们使用了Python自带的包进行使用来阐述</p>
<p>这一部分，我们来看看第三方python包，如何安装，如何使用</p>
<p>以BioPython为例，难度低，用途比较广</p>
<p>biopython网站：<a href="https://biopython.org/wiki/Documentation">https://biopython.org/wiki/Documentation</a></p>
<h3 id="biopython简介"><a href="#biopython简介" class="headerlink" title="biopython简介"></a>biopython简介</h3><p><a href="https://www.yiibai.com/biopython/biopython_introduction.html">Biopython是Python的最大，最受欢迎的生物信息学软件包。它包含许多用于常规生物信息学任务的不同子模块。它由Chapman和Chang开发，主要使用Python编写。它还包含C代码，以优化软件的复杂计算部分。它可以在Windows，Linux，Mac OS X等操作系统上运行。</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li><p>pip</p>
<p>pip是python的包管理器</p>
<p><code>pip install biopython</code></p>
<p>你可以在这个网站上查询需要安装的python包：<a href="https://pypi.org/">https://pypi.org</a></p>
<p>如果你需要安装特定的biopython版本的话</p>
<p><code>pip install biopython==version</code></p>
</li>
<li><p>conda</p>
<p>conda是一个强大的开源的软件包管理系统和环境管理系统</p>
<p>你可以在这个网站上查询需要安装的python包</p>
<p><code>conda install biopython</code></p>
<p>如果需要安装特定的版本</p>
<p><code>conda install biopython=version</code></p>
</li>
<li><p>离线安装</p>
<p>以上两种都属于在线安装，也即为有网状态下</p>
<p>下面来看下离线状态下如何安装python的第三方包</p>
<p>首先，我们要找到软件的官网</p>
<p>然后下载其文件：<a href="http://biopython.org/DIST/biopython-1.78.zip">http://biopython.org/DIST/biopython-1.78.zip</a></p>
<p>下载完成后，解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user:biopython-1.78/ $ ls                                         [14:17:30]</span><br><span class="line">Bio                DEPRECATED.rst     NEWS.rst           Tests</span><br><span class="line">BioSQL             Doc                PKG-INFO           biopython.egg-info</span><br><span class="line">CONTRIB.rst        LICENSE.rst        README.rst         setup.cfg</span><br><span class="line">CONTRIBUTING.rst   MANIFEST.in        Scripts            setup.py</span><br></pre></td></tr></table></figure>



<p>  然后，我们直接运行<code>python setup.py install </code></p>
<p>  就可以进行安装</p>
</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>详细使用的话需要查看其原文档以及手册</p>
<p><a href="http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec3">http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec3</a></p>
<p>我们这里的使用以3D模块为例：<a href="http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec178">http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec178</a></p>
<p>我们需要下载这个文件<code>1fat.cif</code>：<a href="http://files.rcsb.org/download/1FAT.cif">http://files.rcsb.org/download/1FAT.cif</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先导入</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">import</span> Bio</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">In [<span class="number">5</span>]: print(Bio.__version__)</span><br><span class="line"><span class="number">1.78</span></span><br><span class="line">In [<span class="number">15</span>]: <span class="keyword">from</span> Bio.PDB.MMCIFParser <span class="keyword">import</span> MMCIFParser</span><br><span class="line">    ...: parser = MMCIFParser()</span><br><span class="line">In [<span class="number">16</span>]: structure = parser.get_structure(<span class="string">&quot;1fat&quot;</span>, <span class="string">&quot;1fat.cif&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 我们使用biopython获取了1fat这个蛋白的结构信息</span></span><br><span class="line"><span class="comment"># 然后来进行一个简单的示例</span></span><br><span class="line">In [<span class="number">18</span>]: <span class="keyword">for</span> model <span class="keyword">in</span> structure:</span><br><span class="line">    ...:     <span class="keyword">for</span> chain <span class="keyword">in</span> model:</span><br><span class="line">    ...:         <span class="keyword">for</span> residue <span class="keyword">in</span> chain:</span><br><span class="line">    ...:             <span class="keyword">for</span> atom <span class="keyword">in</span> residue:</span><br><span class="line">    ...:                 print(atom)</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line">&lt;Atom O&gt;</span><br><span class="line">&lt;Atom CB&gt;</span><br><span class="line">&lt;Atom CG&gt;</span><br><span class="line">&lt;Atom CD1&gt;</span><br><span class="line">&lt;Atom CD2&gt;</span><br><span class="line">&lt;Atom N&gt;</span><br><span class="line">&lt;Atom CA&gt;</span><br><span class="line">&lt;Atom C&gt;</span><br><span class="line">&lt;Atom O&gt;</span><br><span class="line">&lt;Atom N&gt;</span><br><span class="line">&lt;Atom CA&gt;</span><br><span class="line">&lt;Atom C&gt;</span><br><span class="line">&lt;Atom O&gt;</span><br><span class="line">&lt;Atom CB&gt;</span><br><span class="line">&lt;Atom CG&gt;</span><br><span class="line">&lt;Atom CD1&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>下面是biopython中对于结构的解析</p>
<p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/smcra.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.16.错误</title>
    <url>/2021/03/07/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.16.%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>在使用Python时报错是不可避免的事情</p>
<p>我们来看错误的产生以及分类，以及如何对其进行调试</p>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>python有两种错误，十分容易辨别</p>
<ol>
<li><p>语法错误</p>
<p>语法错误是因为不规范的代码引发的，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: <span class="keyword">while</span> <span class="literal">True</span> print(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;ipython-input-3-2b688bc740d7&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> print(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">               ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>

<p>引发错误的内容就是少加了一个<code>:</code>，关键词是这个<code>SyntaxError: invalid syntax</code></p>
</li>
<li><p>异常</p>
<p>异常是python另外一个容易遇见的错误，即使你的语法是正常的，在运行期间也有可能遇到错误</p>
<p>可能原因有变量未定义,int与str搞错等等</p>
<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: c = <span class="string">&#x27;nihao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出一个未定义的变量</span></span><br><span class="line">In [<span class="number">8</span>]: print(d)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">8</span>-85549cb1de5f&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print(d)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">&#x27;d&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数和字符串相加</span></span><br><span class="line">In [<span class="number">9</span>]: a + c</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">9</span>-e81e582b6fa9&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 a + c</span><br><span class="line"></span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.2.IDE简介</title>
    <url>/2021/02/22/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.2/</url>
    <content><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>我总喜欢把已有的信息放在前面，而不是最后。一方面是因为前人的树，致敬一下；另一方面，我的教学，也是从他们当中进行学习，汇总，精炼，如果觉得我的教程比较慢的话，你也可以直接去学习。</p>
<h3 id="IDE简介："><a href="#IDE简介：" class="headerlink" title="IDE简介："></a>IDE简介：</h3><blockquote>
<p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。微软的Visual Basic是早期的典型的可视化开发环境，后来的包括Borland公司的Delphi等。</p>
</blockquote>
<p>摘自：<a href="https://www.zhihu.com/topic/20018211/intro">https://www.zhihu.com/topic/20018211/intro</a></p>
<blockquote>
<p>Python 中IDE各凭习惯，环境以及爱好来进行使用</p>
</blockquote>
<blockquote>
<p>个人建议新手入坑PyCharm，虽然他慢，但是大部分图形化操作界面，容易上手，对新手很友好，当你不知道怎么配置的时候，default一般是最佳选项。社区版免费下载。</p>
</blockquote>
<blockquote>
<p>然后说说我的配置，我是conda，ipython，jupyter notebook三者联用。我安装的conda为miniconda不是anaconda，因为miniconda更快一点，体积更小一点，然后分别创造python2.x以及python3.x两个环境，在其中安装好ipython以及jupyter notebook进行使用。</p>
</blockquote>
<p><strong>后续的所有程序均在IDE中运行，如果你喜欢简单那么ipython，如果你需要一些可视化比较强的那么jupyter notebook，如果你需要一套强大的工具包那么PyCharm，vscode或者conda</strong></p>
<h3 id="IDE安装："><a href="#IDE安装：" class="headerlink" title="IDE安装："></a>IDE安装：</h3><ol>
<li><p>Pycharm安装：<a href="https://zhuanlan.zhihu.com/p/51780281">https://zhuanlan.zhihu.com/p/51780281</a></p>
<p>很简单的过程，不多做赘述</p>
</li>
<li><p>Conda安装：</p>
<p>miniconda版本：<a href="https://www.jianshu.com/p/edaa744ea47d">https://www.jianshu.com/p/edaa744ea47d</a></p>
<p>anaconda版本：<a href="https://blog.csdn.net/tqlisno1/article/details/108908775">https://blog.csdn.net/tqlisno1/article/details/108908775</a></p>
</li>
</ol>
<h3 id="IDE使用："><a href="#IDE使用：" class="headerlink" title="IDE使用："></a>IDE使用：</h3><p>基本就是Miniconda使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看conda版本</span><br><span class="line">conda -V/--version</span><br><span class="line">conda env list</span><br><span class="line"><span class="meta">#</span><span class="bash">激活或推出环境</span></span><br><span class="line">conda activate env_name</span><br><span class="line">conda deactivate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建虚拟环境：</span></span><br><span class="line">conda create --name py36 python=3.6</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除环境：</span></span><br><span class="line">conda remove -n py36 --all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">复制环境：</span></span><br><span class="line">conda create -n newpy36 --clone py36</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">列出所有包：</span></span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装包</span></span><br><span class="line">conda install package_name</span><br><span class="line"><span class="meta">#</span><span class="bash">package_name为包的名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定安装包版本</span></span><br><span class="line">conda install python=3.5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装ipython</span></span><br><span class="line">conda install -c anaconda ipython </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动ipython</span></span><br><span class="line">ipython</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="conda-包查询网址：https-anaconda-org-anaconda"><a href="#conda-包查询网址：https-anaconda-org-anaconda" class="headerlink" title="conda 包查询网址：https://anaconda.org/anaconda"></a>conda 包查询网址：<a href="https://anaconda.org/anaconda">https://anaconda.org/anaconda</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mymac:~/ $ conda activate py3                                                                                [<span class="number">20</span>:<span class="number">21</span>:<span class="number">30</span>]</span><br><span class="line">(py3) mymac:~/ $ ipython                                                                                     [<span class="number">20</span>:<span class="number">26</span>:<span class="number">57</span>]</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.7</span> (default, Mar <span class="number">26</span> <span class="number">2020</span>, <span class="number">10</span>:<span class="number">32</span>:<span class="number">53</span>)</span><br><span class="line">Type <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;license&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.13</span><span class="number">.0</span> -- An enhanced Interactive Python. Type <span class="string">&#x27;?&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: print(<span class="string">&#x27;hellow world!&#x27;</span>)</span><br><span class="line">hellow world!</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.3 :hello world；注释；数据类型</title>
    <url>/2021/02/22/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.3/</url>
    <content><![CDATA[<h3 id="开始第一个编程"><a href="#开始第一个编程" class="headerlink" title="开始第一个编程"></a>开始第一个编程</h3><p>当然是  输出 Hellow World</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;Hellow World!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>有两种选项</p>
<ol>
<li>使用ipython或者jupyter notebook等，在其中直接输入此命令然后运行</li>
<li>保存此命令为<code>hellow.py</code>文件，在命令行中输入<code>python hellow.py</code></li>
</ol>
<p><strong>Welcom to Python!</strong></p>
<p>现在你已经完成了你的第一个程序，成功的输出了<code>Hellow World!</code>在屏幕上</p>
<p>接下来，我们会进行进一步的学习</p>
<h3 id="Python中的注释"><a href="#Python中的注释" class="headerlink" title="Python中的注释"></a>Python中的注释</h3><p>python可以进行单行注释，用<code>#</code>开头</p>
<p>也可以进行多行注释，使用三个单引号<code>&#39;&#39;&#39;</code>或者三个双引号<code>&quot;&quot;&quot;</code>将内容涵盖在内</p>
<p>如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">84</span>]: <span class="comment"># 这是一个注释</span></span><br><span class="line">    ...: print(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    ...: <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    ...: 这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">    ...: 这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">    ...: 这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">    ...: &#x27;&#x27;&#x27;</span></span><br><span class="line">    ...: print(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    ...: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ...: 这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">    ...: 这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">    ...: 这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">    ...: &quot;&quot;&quot;</span></span><br><span class="line">    ...: print(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">      </span><br><span class="line">Hello, World!</span><br><span class="line">Hello, World!</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>

<p><strong>我们为什么需要注释，以及该如何注释</strong></p>
<p>注释是编程能力的重要一部分，良好的注释能力意味着你有了良好的团队合作能力</p>
<p>想象一下，当你面对自己三年前编写的万行无注释代码时，会是什么样的感觉</p>
<p>但是注释也应该有一个标准，以便交流，这里推荐谷歌风格规范，不仅仅是注释，更是对其余方面也进行了阐释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Google 开源项目风格指南 (中文版)</span><br><span class="line"></span><br><span class="line">在线文档托管在 ReadTheDocs : 在线阅读最新版本 [https:&#x2F;&#x2F;google-styleguide.readthedocs.io&#x2F;zh_CN&#x2F;latest&#x2F;]</span><br><span class="line">中文风格指南 GitHub 托管地址：zh-google-styleguide [https:&#x2F;&#x2F;github.com&#x2F;zh-google-styleguide&#x2F;zh-google-styleguide]</span><br><span class="line">离线文档下载地址：release [https:&#x2F;&#x2F;github.com&#x2F;zh-google-styleguide&#x2F;zh-google-styleguide&#x2F;releases]”</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.</span><br><span class="line"></span><br><span class="line">Args:</span><br><span class="line">列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受*foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出*foo和**bar.</span><br><span class="line"></span><br><span class="line">Returns: (或者 Yields: 用于生成器)</span><br><span class="line">描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</span><br><span class="line"></span><br><span class="line">Raises:</span><br><span class="line">列出与接口有关的所有异常.”</span><br><span class="line"></span><br><span class="line">def fetch_smalltable_rows(table_handle: smalltable.Table,</span><br><span class="line">                        keys: Sequence[Union[bytes, str]],</span><br><span class="line">                        require_all_keys: bool &#x3D; False,</span><br><span class="line">) -&gt; Mapping[bytes, Tuple[str]]:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Fetches rows from a Smalltable.</span><br><span class="line"></span><br><span class="line">    Retrieves rows pertaining to the given keys from the Table instance</span><br><span class="line">    represented by table_handle.  String keys will be UTF-8 encoded.</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        table_handle: An open smalltable.Table instance.</span><br><span class="line">        keys: A sequence of strings representing the key of each table</span><br><span class="line">        row to fetch.  String keys will be UTF-8 encoded.</span><br><span class="line">        require_all_keys: Optional; If require_all_keys is True only</span><br><span class="line">        rows with values set for all keys will be returned.</span><br><span class="line"></span><br><span class="line">    Returns:</span><br><span class="line">        A dict mapping keys to the corresponding table row data</span><br><span class="line">        fetched. Each row is represented as a tuple of strings. For</span><br><span class="line">        example:</span><br><span class="line"></span><br><span class="line">        &#123;b&#39;Serak&#39;: (&#39;Rigel VII&#39;, &#39;Preparer&#39;),</span><br><span class="line">        b&#39;Zim&#39;: (&#39;Irk&#39;, &#39;Invader&#39;),</span><br><span class="line">        b&#39;Lrrr&#39;: (&#39;Omicron Persei 8&#39;, &#39;Emperor&#39;)&#125;</span><br><span class="line"></span><br><span class="line">        Returned keys are always bytes.  If a key from the keys argument is</span><br><span class="line">        missing from the dictionary, then that row was not found in the</span><br><span class="line">        table (and require_all_keys must have been False).</span><br><span class="line"></span><br><span class="line">    Raises:</span><br><span class="line">        IOError: An error occurred accessing the smalltable.</span><br><span class="line">		&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>



<h3 id="Python中的数据类型"><a href="#Python中的数据类型" class="headerlink" title="Python中的数据类型"></a>Python中的数据类型</h3><p>数据类型和基本的数据结构是根本，这意味着你使用怎样的方式来存储数据</p>
<p>在进行实际使用时，我们使用等号（=）来进行赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: a = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">   ...: b = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">   ...: c = <span class="string">&quot;runoob&quot;</span>     <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">type</span>(b)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="built_in">float</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="built_in">type</span>(c)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="built_in">str</span></span><br><span class="line"><span class="comment">#当然，我们也可以更改变量类型</span></span><br><span class="line">In [<span class="number">14</span>]: d = <span class="built_in">str</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">type</span>(d)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="built_in">str</span></span><br></pre></td></tr></table></figure>



<p>数据类型和基本的数据结构是根本，这意味着你使用怎样的方式来存储数据</p>
<ul>
<li><p>数值类型</p>
<ul>
<li>整数型(Int)：没有小数，无大小，你的电脑内存有多大，整数就可以创造多大</li>
<li>浮点型(float)：存在小数点，可以使用普通写法<code>1.23,3.5,-9.1</code>等，也可以使用科学计数法<code>2.5e2,2.5**10</code></li>
<li>复数型( (complex))：我使用的比较少， 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点–摘自，菜鸟教程</li>
</ul>
</li>
<li><p>字符串：字符串是最常见的数字类型，<code>hellow world!</code>便是</p>
<ul>
<li><p>我们可以直接进行赋值：例如<code>a = &#39;u can u up&#39;</code> 或者 <code>a = &quot;no can no bb&quot;</code>,当然你也可以使用<code>a = &quot;i say &#39;somthing&#39;&quot;</code>，来进行表示，唯一需要注意的一点是中英文的切换。</p>
</li>
<li><p>转义字符，python中的转衣字符有<code>\n</code>表示换行，<code>\t</code>表示制表符，我们最常见的用法是</p>
<ul>
<li>```python<br>In [61]: print(‘Hellow\tWorld!\nNi\tHao.’)<br>Hellow    World!<br>Ni    Hao.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 在进行使用时，如果你不想转义，则可以在，前面加&#96;r&#96;,如下</span><br><span class="line"></span><br><span class="line">+ &#96;&#96;&#96;python</span><br><span class="line">  In [62]: print(r&#39;Hellow\tWorld!\nNi\tHao.&#39;)</span><br><span class="line">  Hellow\tWorld!\nNi\tHao.</span><br></pre></td></tr></table></figure></li>
<li>说到这个，不得不提起PDB格式(蛋白质数据专用格式)，PDB格式ATOM共80列，每一列都需要填充，也就是，你在分割时需要按照index进行分割，而不是<code>\t</code></li>
</ul>
</li>
</ul>
</li>
<li><p>布尔值：一个布尔值只有<code>True</code>、<code>False</code>两种值，布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算,常常用作比较，以及判断</p>
<ul>
<li><p>```python<br>In [68]: print(8 &gt; 7)</p>
<pre><code>...: print(8 &lt; 7)
</code></pre>
<p>True<br>False<br>In [75]: a<br>Out[75]: 7</p>
<p>In [76]: a &lt;10 and a &gt;5<br>Out[76]: True</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">+ 空值：&#96;None&#96;不能理解为&#96;0&#96;,&#96;&quot;&quot;&#96;,&#96;[]&#96;，&#96;False&#96;，&#96;None&#96;是一个特殊的空值。</span><br><span class="line"></span><br><span class="line">  + &#96;&#96;&#96;python</span><br><span class="line">    In [65]: a &#x3D; None</span><br><span class="line">        ...: type(a)</span><br><span class="line">    Out[65]: NoneType</span><br><span class="line">    In [66]: print(a)</span><br><span class="line">    None</span><br></pre></td></tr></table></figure></li>
<li><p>从类型层面上，<code>False</code>是布尔类型，而<code>None</code>是<code>class &#39;NoneType&#39;</code>；从意义层面上，<code>None</code>表示不存在，而<code>False</code>表示真假。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>关于数据类型与内存空间</p>
</blockquote>
<blockquote>
<p>在python中，如果改变变量的数值类型，那么其内存空间将会重新分配，但重新引用并不会造成内存空间的重分配</p>
<p>我们来看一个例子</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a赋值为100</span></span><br><span class="line">In [<span class="number">26</span>]: a  = <span class="number">100</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">#查看内存地址</span></span><br><span class="line">In [<span class="number">27</span>]: <span class="built_in">id</span>(a)</span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">4452845280</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#查看数据类型</span></span><br><span class="line">In [<span class="number">28</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">28</span>]: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: b = a</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="built_in">id</span>(b)</span><br><span class="line">Out[<span class="number">30</span>]: <span class="number">4452845280</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: c = <span class="built_in">float</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: <span class="built_in">type</span>(c)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="built_in">float</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: <span class="built_in">id</span>(c)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">4485900944</span></span><br><span class="line">  </span><br><span class="line">In [<span class="number">52</span>]: d = <span class="built_in">str</span>(a)</span><br><span class="line">  </span><br><span class="line">In [<span class="number">54</span>]: <span class="built_in">type</span>(d)</span><br><span class="line">Out[<span class="number">54</span>]: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: <span class="built_in">id</span>(d)</span><br><span class="line">Out[<span class="number">53</span>]: <span class="number">4485942256</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.4</title>
    <url>/2021/02/23/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.4/</url>
    <content><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>上面我们谈了数据类型，这篇我们该看下数据结构</p>
<p>Python中的数据结构有list(列表)，dict（字典），set（集合）, tuple（元祖）</p>
<p>可以对元素进行修改的数据结构有：list(列表)，dict（字典），set（集合）</p>
<p>不可以对元素进行修改的数据结构有： tuple（元祖）</p>
<h3 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h3><ul>
<li><p>列表是最常用的，也是最基本的数据结构。</p>
</li>
<li><p>使用<code>[]</code>来生成一个列表</p>
</li>
<li><p>列表的元素可以是，字符串，数字等基本数据类型，也可以是列表，元祖等其余数据结构</p>
</li>
<li><p>列表是有序的，你可以正向使用，也可以反向使用。</p>
</li>
<li><p>列表可以进行的基本操作有索引，切片，加，乘，检查成员。</p>
</li>
</ul>
<p><img src="/Users/sujiaqi/Pictures/Typora/python-list.png" alt="查看源图像"></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">  </span><br><span class="line">In [<span class="number">35</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">35</span>]: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: b=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: c=[a,b]</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: print(a)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: print(b)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: print(c)</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表索引操作</span></span><br><span class="line">In [<span class="number">12</span>]: a[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: a[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: a[-<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a[-<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表加操作</span></span><br><span class="line">In [<span class="number">16</span>]: d = a + b</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: print(d)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表乘操作</span></span><br><span class="line">In [<span class="number">18</span>]: a*<span class="number">3</span></span><br><span class="line">Out[<span class="number">18</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: c*<span class="number">2</span></span><br><span class="line">Out[<span class="number">24</span>]: [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查成员</span></span><br><span class="line">In [<span class="number">25</span>]: <span class="number">1</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">25</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="number">7</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">26</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表切片</span></span><br><span class="line">In [<span class="number">27</span>]: f = a*<span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: print(f)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 一般用法</span></span><br><span class="line">In [<span class="number">29</span>]: f[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">29</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: f[<span class="number">3</span>:]</span><br><span class="line">Out[<span class="number">30</span>]: [<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: f[:-<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">32</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 步长</span></span><br><span class="line"><span class="comment"># 从f[1]到f[4]，每隔两位抽取一个元素</span></span><br><span class="line">In [<span class="number">34</span>]: f[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">34</span>]: [<span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>



<h3 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h3><ul>
<li><p>元祖是不可修改的</p>
</li>
<li><p>使用<code>( )</code>来创造一个元祖</p>
</li>
<li><p>也可以根据索引来使用元素，或切片</p>
</li>
<li><p>不可以修改元祖中的值，但元祖之间可以进行连接</p>
</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建元祖</span></span><br><span class="line">In [<span class="number">41</span>]: tup1=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: tup2=(tup1,tup1)</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: tup2</span><br><span class="line">Out[<span class="number">43</span>]: ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: <span class="built_in">type</span>(tup1)</span><br><span class="line">Out[<span class="number">44</span>]: <span class="built_in">tuple</span></span><br><span class="line"><span class="comment"># 元祖切片</span></span><br><span class="line">In [<span class="number">45</span>]: tup1[:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">45</span>]: (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 根据index来使用元祖元素</span></span><br><span class="line">In [<span class="number">47</span>]: tup1[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">47</span>]: <span class="number">2</span></span><br><span class="line"><span class="comment"># 元祖连接</span></span><br><span class="line">In [<span class="number">48</span>]: tup3 = tup1 + tup2</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: tup3</span><br><span class="line">Out[<span class="number">49</span>]: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.5</title>
    <url>/2021/02/24/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.5/</url>
    <content><![CDATA[<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li><p>字典是经常使用的数据结构</p>
</li>
<li><p>字典分为key 以及value两部分</p>
</li>
<li><p>每个Key都可以对应一个value</p>
</li>
<li><p>使用<code>&#123;&#125;</code>来创建字典</p>
</li>
<li><p>字典的元素可以是比较任意的类型，例如列表，元祖等</p>
</li>
<li><p>字典的一般操作有创建，更新元素，删除元素，添加元素，以及遍历</p>
</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个空字典</span></span><br><span class="line">In [<span class="number">1</span>]: a = &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="built_in">dict</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 当然也可以创建一个非空字典</span></span><br><span class="line">In [<span class="number">4</span>]: b = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: b</span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在b中更新元素</span></span><br><span class="line">In [<span class="number">6</span>]: b[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;Zara&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: b[<span class="string">&#x27;Name&#x27;</span>] = <span class="string">&#x27;Xiaoming&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: b</span><br><span class="line">Out[<span class="number">8</span>]: &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Xiaoming&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在删除b中元素</span></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">del</span> b[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: b</span><br><span class="line">Out[<span class="number">10</span>]: &#123;<span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在b中添加元素</span></span><br><span class="line">In [<span class="number">11</span>]: b[<span class="string">&#x27;new&#x27;</span>] = <span class="string">&#x27;nihao&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: b</span><br><span class="line">Out[<span class="number">12</span>]: &#123;<span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;new&#x27;</span>: <span class="string">&#x27;nihao&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul>
<li>集合是无序的，<strong>不重复的</strong></li>
<li>使用<code>set()</code>来创建一个集合</li>
<li>你可以添加元素，也可以删除元素</li>
<li>集合比较重要的是其运算求交集，并集等等</li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个集合</span></span><br><span class="line">In [<span class="number">13</span>]: a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">    ...: b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">In [<span class="number">24</span>]: a = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>])</span><br><span class="line">In [<span class="number">26</span>]: b = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line">In [<span class="number">25</span>]: a</span><br><span class="line">Out[<span class="number">25</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: b</span><br><span class="line">Out[<span class="number">27</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: a</span><br><span class="line">Out[<span class="number">14</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: b</span><br><span class="line">Out[<span class="number">15</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ab的交集</span></span><br><span class="line">In [<span class="number">17</span>]: a &amp; b</span><br><span class="line">Out[<span class="number">17</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ab的并集</span></span><br><span class="line">In [<span class="number">16</span>]: a | b</span><br><span class="line">Out[<span class="number">16</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在a中但不在b中的元素</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: a-b</span><br><span class="line">Out[<span class="number">18</span>]: &#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#不在a中不在b中</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: a ^ b</span><br><span class="line">Out[<span class="number">19</span>]: &#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#添加元素</span></span><br><span class="line">In [<span class="number">28</span>]: a.add(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: a</span><br><span class="line">Out[<span class="number">29</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#移除元素</span></span><br><span class="line">In [<span class="number">30</span>]: a.remove(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: a</span><br><span class="line">Out[<span class="number">31</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.6</title>
    <url>/2021/02/25/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.6/</url>
    <content><![CDATA[<h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><p>简单说下就是<code>if</code>判断</p>
<p><img src="https://i.loli.net/2021/02/25/EHfGhODU4zk9mqx.jpg" alt="cainiaojiaocheng1"></p>
<p>简单来说下基本形式就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件一：</span><br><span class="line">	执行动作一</span><br><span class="line"><span class="keyword">elif</span> 条件二：</span><br><span class="line">	执行动作二：</span><br><span class="line"><span class="keyword">else</span> 条件三：</span><br><span class="line">	执行动作三</span><br></pre></td></tr></table></figure>

<p>如果你只需要判断一种条件那么：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件一：</span><br><span class="line">	执行动作一</span><br></pre></td></tr></table></figure>

<p>甚至不需要else</p>
<p>需要注意的是  <code>if</code>判断条件后面需要加<code>：</code></p>
<p><code>if</code>常和<code>while</code>以及<code>for</code>联用</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从一个列表中用判断某个数字是否存在</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> a:</span><br><span class="line">	print(<span class="string">&#x27;1 in a&#x27;</span>)</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 判断一个列表中特定数字是否存在</span></span><br><span class="line"><span class="comment"># 创建一个列表，包含`1,2,3,4`四个元素</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="comment">#判断列表元素是否等于1</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">		print(<span class="string">&#x27;1 in a&#x27;</span>)</span><br><span class="line"><span class="comment">#判断列表元素是否等于2	</span></span><br><span class="line">	<span class="keyword">elif</span> <span class="number">1</span> &lt; i &lt;  <span class="number">3</span>:</span><br><span class="line">		print(<span class="string">&#x27;2 in a&#x27;</span>)</span><br><span class="line"><span class="comment">#如果列表元素既不等于1也不等于2</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(<span class="string">&#x27;this &gt;= 3&#x27;</span>)</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<p>当然列表也可以嵌套，这取决你的解决问题的复杂程度</p>
<p><strong>你当然可以按照下述操作进行使用</strong></p>
<p><strong>但是需要注意</strong></p>
<p><strong>当你的问题达到一个很复杂的程度的时候，使用嵌套方式会加大你的记忆程度，以及程序的使用难度以及设计难度</strong></p>
<p><strong>而且会使问题的解决方式实际上变得更为复杂，这取决于你的记忆以及编码水平</strong></p>
<p><strong>同时在这里你应该注意缩进符对python的影响，只要有一个缩进有问题，此程序便不可运行</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">13</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">    ...:</span><br><span class="line">    ...: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ...:	<span class="keyword">if</span> <span class="number">1</span>&lt;i&lt;<span class="number">4</span>:</span><br><span class="line">    ...:		<span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">    ...:			print(<span class="string">&#x27;this is 1 and this &lt; 4&#x27;</span>)</span><br><span class="line">    ...:		<span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">    ...:			print(<span class="string">&#x27;this is 2 and this &lt; 4&#x27;</span>)</span><br><span class="line">    ...:	<span class="keyword">if</span> i &gt; <span class="number">4</span>:</span><br><span class="line">    ...:		<span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">    ...:			print(<span class="string">&#x27;this is 5 and this &gt; 4&#x27;</span>)</span><br><span class="line">    ...:		<span class="keyword">elif</span> i == <span class="number">6</span>:</span><br><span class="line">    ...:			print(<span class="string">&#x27;this is 6 and this &gt; 4&#x27;</span>)</span><br><span class="line">    ...:		<span class="keyword">else</span>:</span><br><span class="line">    ...:			print(<span class="string">&#x27;this is others&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">this <span class="keyword">is</span> <span class="number">2</span> <span class="keyword">and</span> this &lt; <span class="number">4</span></span><br><span class="line">this <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> this &gt; <span class="number">4</span></span><br><span class="line">this <span class="keyword">is</span> <span class="number">6</span> <span class="keyword">and</span> this &gt; <span class="number">4</span></span><br><span class="line">this <span class="keyword">is</span> others</span><br><span class="line">this <span class="keyword">is</span> others</span><br><span class="line">this <span class="keyword">is</span> others</span><br></pre></td></tr></table></figure>



<p><code>if</code>中常用的一些判断符号</p>
<table>
<thead>
<tr>
<th align="left">判断符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;</code></td>
<td align="left">小于</td>
</tr>
<tr>
<td align="left"><code>&lt;=</code></td>
<td align="left">小于或等于</td>
</tr>
<tr>
<td align="left"><code>&gt;</code></td>
<td align="left">大于</td>
</tr>
<tr>
<td align="left"><code>&gt;=</code></td>
<td align="left">大于或等于</td>
</tr>
<tr>
<td align="left"><code>==</code></td>
<td align="left">等于，比较两个值是否相等</td>
</tr>
<tr>
<td align="left"><code>!=</code></td>
<td align="left">不等于</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.7</title>
    <url>/2021/02/26/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.7/</url>
    <content><![CDATA[<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>循环，是最常用的命令，和判断语句一样，一般情况下，我们将问题或者实际情况进行拆解，分类，然后使用循环以及判断来寻找潜在的解。</p>
<p>python的循环有两个<code>for</code>以及<code>while</code></p>
<p>我们先来看<code>for</code>循环</p>
<p><code>for</code>循环可以遍历字符串，列表，字典等等数据结构。</p>
<p>一般的情况就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">	print(i)</span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">In [<span class="number">1</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">   ...:     print(i)</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">In [<span class="number">3</span>]: a = <span class="string">&#x27;1,2,3,4&#x27;</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">   ...:     print(i)</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">,</span><br><span class="line"><span class="number">2</span></span><br><span class="line">,</span><br><span class="line"><span class="number">3</span></span><br><span class="line">,</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="comment"># 字典会比较复杂，你可以遍历keys，value以及（key，value）</span></span><br><span class="line"><span class="comment"># 我们来遍历key+value</span></span><br><span class="line">In [<span class="number">6</span>]: a = &#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">   ...: <span class="keyword">for</span> i <span class="keyword">in</span> a.items():</span><br><span class="line">   ...:     print(i)</span><br><span class="line">   ...:</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;d&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>或者你可以通过索引来进行遍历，最常见是遍历列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">   ...:     print(a[i])</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 让我们来看看整个过程发生了什么</span></span><br><span class="line"><span class="comment"># 当然是用代码来进行表示</span></span><br><span class="line">In [<span class="number">9</span>]: a</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#获取列表长度</span></span><br><span class="line">In [<span class="number">10</span>]: <span class="built_in">len</span>(a)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">4</span></span><br><span class="line"><span class="comment">#使用range函数创建一个整数列表</span></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">#使用for来遍历这个整数列表</span></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#使用索引来遍历列表a中的所有元素</span></span><br><span class="line">In [<span class="number">13</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ...:     print(a[i])</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>让我们再来看看<code>else</code></p>
<p><code>else</code>在循环中也可以使用</p>
<p>我们先来看一个简单的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    ...: <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    ...:     print(x)</span><br><span class="line">    ...: <span class="keyword">else</span>:</span><br><span class="line">    ...:     print(<span class="string">&quot;else&quot;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在上例中，我们先使用<code>for</code>遍历了<code>x</code>，执行完成之后，程序执行<code>else</code>语句，打印出<code>print</code></p>
<p>是不是感觉好像<code>else</code>没有什么用处</p>
<p>就仿佛。。。。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    ...: <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    ...:     print(x)</span><br><span class="line">    ...: print(<span class="string">&quot;else&quot;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="keyword">else</span></span><br></pre></td></tr></table></figure>

<p>恩。。。确实是，我们再来看一个官方例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">22</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:             print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:             <span class="keyword">break</span></span><br><span class="line">    ...:     <span class="keyword">else</span>:</span><br><span class="line">    ...:         print(n, <span class="string">&#x27;是一个素数&#x27;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">2</span> 是一个素数</span><br><span class="line"><span class="number">3</span> 是一个素数</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span> 是一个素数</span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line"><span class="number">7</span> 是一个素数</span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br></pre></td></tr></table></figure>

<p>整个过程发生了什么</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们首先使用range函数创造了一个整数列表</span></span><br><span class="line">In [<span class="number">23</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     print(n)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="comment"># 然后我们使用range函数创建了，从2到n的一个整数列表</span></span><br><span class="line">In [<span class="number">26</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     print(<span class="built_in">range</span>(<span class="number">2</span>,n))</span><br><span class="line">    ...:</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line"><span class="comment"># 随后我们来检查是否n处以x等于0</span></span><br><span class="line">In [<span class="number">28</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:            print( <span class="string">&#x27;check&#x27;</span>,n,<span class="string">&#x27;/&#x27;</span>,x,<span class="string">&#x27;=0&#x27;</span>)</span><br><span class="line">    ...:            print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:</span><br><span class="line">check <span class="number">4</span> / <span class="number">2</span> =<span class="number">0</span></span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line">check <span class="number">6</span> / <span class="number">2</span> =<span class="number">0</span></span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line">check <span class="number">6</span> / <span class="number">3</span> =<span class="number">0</span></span><br><span class="line"><span class="number">6</span> 等于 <span class="number">3</span> * <span class="number">2.0</span></span><br><span class="line">check <span class="number">8</span> / <span class="number">2</span> =<span class="number">0</span></span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line">check <span class="number">8</span> / <span class="number">4</span> =<span class="number">0</span></span><br><span class="line"><span class="number">8</span> 等于 <span class="number">4</span> * <span class="number">2.0</span></span><br><span class="line">check <span class="number">9</span> / <span class="number">3</span> =<span class="number">0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br><span class="line"><span class="comment"># 如果我们发现了n除以x等于0</span></span><br><span class="line"><span class="comment"># 例如 check 6 / 2 =0</span></span><br><span class="line"><span class="comment"># 那么打印出6 等于 2 * 3.0</span></span><br><span class="line"><span class="comment"># for x in range(2, n) 被break掉，else不会执行</span></span><br><span class="line">In [<span class="number">29</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:             print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:             <span class="keyword">break</span></span><br><span class="line">    ...:</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br><span class="line"><span class="comment"># 如果我们没有发现n除以x等于0</span></span><br><span class="line"><span class="comment"># 那么执行else</span></span><br><span class="line"><span class="comment"># 打印出3 是个素数</span></span><br><span class="line">In [<span class="number">32</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:             print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:             <span class="keyword">break</span></span><br><span class="line">    ...:     <span class="keyword">else</span>:</span><br><span class="line">    ...:         print(n, <span class="string">&#x27;是个素数&#x27;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">2</span> 是个素数</span><br><span class="line"><span class="number">3</span> 是个素数</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span> 是个素数</span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line"><span class="number">7</span> 是个素数</span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br></pre></td></tr></table></figure>

<p>其实，写到这里我也有些困了，<code>for </code>和<code>else</code>一起搭的用法确实有些反人类，看看官方的这个例子，也就是在整体的<code>for</code>循环中，又分为两个部分，一个用于判断，如果判断成功则<code>else</code>不被执行，否则执行<code>else</code></p>
<p>好了，今天就到这里.</p>
]]></content>
  </entry>
  <entry>
    <title>PythonEveryDay</title>
    <url>/2021/02/22/python-every-day/README/</url>
    <content><![CDATA[<p>Hi, 大家好。</p>
<blockquote>
<p>开这个专栏是因为大家想学，而且，基本不需要更新的问题。</p>
<p>我们会从基础开始进行教学，继而进行安装，包使用，编程等等。</p>
<p>由于是总结以及教学方面，我会参考各种教程，如有引用，必定开源(本教程遵循MIT协议)。</p>
<p>当然，我们的实例重点是偏向于python使用与结构生物学，CADD，化学信息学等方面的使用。</p>
<p>（毕竟爬PubChem，也算爬虫的一种）</p>
<p>最终会提供几个实例，作为结尾，说到这里，又应该开一个仓库了。</p>
<p>(Typora + Gitee)[<a href="https://zhuanlan.zhihu.com/p/349427506]%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%9F%F0%9F%98%8E">https://zhuanlan.zhihu.com/p/349427506]自动上传了解一下？😎</a></p>
</blockquote>
<p>祝大家学习愉快！</p>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.9</title>
    <url>/2021/02/28/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.9/</url>
    <content><![CDATA[<h3 id="循环中的一些关键词"><a href="#循环中的一些关键词" class="headerlink" title="循环中的一些关键词"></a>循环中的一些关键词</h3><p>在上面我们已经说了<code>else</code></p>
<p>现在那么只有三个关键词<code>break, continue,pass</code></p>
<ol>
<li><p><code>break</code></p>
<p><code>break</code> 用于打破循环，想到了悟空，hhh，在循环中，当值满足某个条件值，可以使用<code>break</code>打破此循环，避免执行后续语句，减少计算量</p>
<p>一般形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">22</span>]: a = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">    ...: <span class="keyword">for</span>   i  <span class="keyword">in</span> a:</span><br><span class="line">    ...: 	<span class="keyword">if</span> i == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">    ...:		print(<span class="string">&#x27;find d and break&#x27;</span>)</span><br><span class="line">    ...:		<span class="keyword">break</span></span><br><span class="line">    ...:	print(<span class="string">&#x27;find&#x27;</span>,i)</span><br><span class="line">    ...: print(<span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line">find a</span><br><span class="line">find b</span><br><span class="line">find c</span><br><span class="line">find d <span class="keyword">and</span> <span class="keyword">break</span></span><br><span class="line">finished</span><br></pre></td></tr></table></figure></li>
<li><p><code>continue</code>用于跳过当前的循环</p>
<p>当满足你的判断条件时，使用<code>continue</code>可以跳过本次循环，进入下一循环</p>
<p>我们来看一个实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当我们使用continue时</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: a = <span class="string">&#x27;abcdefg&#x27;</span> </span><br><span class="line">    ...: print(<span class="string">&#x27;continue&#x27;</span>) </span><br><span class="line">    ...: <span class="keyword">for</span> i <span class="keyword">in</span> a: </span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>: </span><br><span class="line">    ...:         <span class="keyword">continue</span> </span><br><span class="line">    ...:     print(<span class="string">&#x27;find &#x27;</span>,i) </span><br><span class="line">    ...:                                                                                                                                                   </span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">find  a</span><br><span class="line">find  b</span><br><span class="line">find  d</span><br><span class="line">find  e</span><br><span class="line">find  f</span><br><span class="line">find  g</span><br><span class="line"><span class="comment"># 可以看出我们跳过了c进行了后续的循环</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们使用break是</span></span><br><span class="line">In [<span class="number">62</span>]: print(<span class="string">&#x27;break&#x27;</span>)</span><br><span class="line">    ...: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">    ...:         <span class="keyword">break</span></span><br><span class="line">    ...:     print(<span class="string">&#x27;find &#x27;</span>,i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">find  a</span><br><span class="line">find  b</span><br><span class="line"><span class="comment"># 可以看出当遇到break时，循环直接被打破</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><code>pass</code></p>
<p>pass是空语句，不做任何事情，你可以把它当作一个为了保证程序结构完整性而创造出来的词</p>
<p>只是为了占个位置，看起来顺眼</p>
<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">63</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">    ...:         <span class="keyword">pass</span></span><br><span class="line">    ...:     print(<span class="string">&#x27;find &#x27;</span>,i)</span><br><span class="line">    ...:</span><br><span class="line">find  a</span><br><span class="line">find  b</span><br><span class="line">find  c</span><br><span class="line">find  d</span><br><span class="line">find  e</span><br><span class="line">find  f</span><br><span class="line">find  g</span><br><span class="line"><span class="comment"># 可以看出当我们使用pass时，实际上没有发生任何变化，程序会正常执行，循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者下面一个例子</span></span><br><span class="line">In [<span class="number">38</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a: </span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>: </span><br><span class="line">    ...:         <span class="keyword">pass</span> </span><br><span class="line">    ...:     <span class="keyword">else</span>: </span><br><span class="line">    ...:         print(i,<span class="string">&#x27;is not c&#x27;</span>) </span><br><span class="line"><span class="comment"># 当我们在使用pass时，程序不执行任何操作，但当条件不是‘c’时，程序执行print操作                                                                                                                                               </span></span><br><span class="line">a <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">b <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">d <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">e <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">f <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">g <span class="keyword">is</span> <span class="keyword">not</span> c</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Python每日一谈｜No.8</title>
    <url>/2021/02/28/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.8/</url>
    <content><![CDATA[<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>另外一个常用的循环语句是<code>while</code>,在<code>while</code>语句中只要满足条件，就可以一直循环</p>
<p>基本形式为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 判断语句：</span><br><span class="line">	执行语句</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = <span class="number">0</span></span><br><span class="line">In [<span class="number">2</span>]: b = <span class="number">10</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">while</span> a &lt; b :</span><br><span class="line">   ...:     print(a)</span><br><span class="line">   ...:     a = a + <span class="number">1</span></span><br><span class="line">   ...: print(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然利用这个特性，你也可以使用一个死循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">9</span>]: a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">while</span> a == b:</span><br><span class="line">    ...:     print(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 此时你可以关闭终端，或者ctrl + c来进行终止</span></span><br></pre></td></tr></table></figure>

<p>当然<code>while</code>也可以与<code>else</code>联用，个人理解在<code>while</code>执行完成之后，不符合判段条件时，便可以执行<code>else</code>语句</p>
<p>基本形式为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line"></span><br><span class="line">	执行语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line"></span><br><span class="line">	执行语句</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">12</span>]: a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="keyword">while</span> a &lt; b :</span><br><span class="line">    ...:     print(a)</span><br><span class="line">    ...:     a = a + <span class="number">1</span></span><br><span class="line">    ...: <span class="keyword">else</span>:</span><br><span class="line">    ...:     print(<span class="string">&#x27;jump&#x27;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">jump</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
