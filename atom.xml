<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZeroDesigner</title>
  
  <subtitle>一切的失败源于我们对世界认知的模糊</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-15T10:42:39.541Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jiaqi Su</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python每日一谈｜No.21.实例.1-PyMol.2-计算RMSD</title>
    <link href="http://example.com/2021/03/15/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.21.%E5%AE%9E%E4%BE%8B.1-PyMol.2/"/>
    <id>http://example.com/2021/03/15/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.21.%E5%AE%9E%E4%BE%8B.1-PyMol.2/</id>
    <published>2021-03-15T08:24:58.043Z</published>
    <updated>2021-03-15T10:42:39.541Z</updated>
    
    <content type="html"><![CDATA[<p>我可以把cmd的指令遍历一次，这样就不需要愁拖稿了hhh</p><p>我们来看下蛋白质的中的结构比较</p><p>在结构比较中，你可以很方便的使用align对两个object进行比较</p><p>这里的object你可以简单的理解为蛋白</p><ol><li>你可以很方便的pymol自带的工具对两个或者多个蛋白进行align</li></ol><p>步骤如下，3nss–&gt;Action–&gt;align–&gt;to molecule–&gt;5nwe</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/Screen%20Shot%202021-03-15%20at%204.44.37%20PM.png" alt="Screen Shot 2021-03-15 at 4.44.37 PM"></p><ol start="2"><li>当align不能满足的时候，你也可以使用pymol的插件alignment选择一个比对方式，来进行比较<br><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315164700320.png" alt="image-20210315164700320"></li></ol><p>这里我们先来看下比较方式的不同定义：</p><p>align:首先进行序列对齐，然后进行结构叠加，随后循环几个周期来进行优化，以便拒绝掉在拟合期间发现的异常值。在序列相似度较高的蛋白中align效果会比较好(序列&gt;30%)，如果序列相似度比较低的话，super或者cealign会比较好。</p><p>super:对齐选择的结构，他执行的是基于结构的动态规划对齐(不依赖于序列)，随后进行循环优化来提高拟合度，对于低序列相似性的蛋白来说，super比align更为鲁棒。</p><p>cealign：使用CE算法来对齐两个蛋白。对于几乎没有序列相似性的蛋白质（twilight zone），它是非常鲁棒的。对于结构比较相似的蛋白，请使用<a href="https://pymolviki.org/index.php/Super">super</a>首选命令，对于序列比较相似的蛋白，则align为首选命令，因为这些命令比cealign快得多</p><p>fit：将第一选择中的模型叠加到第二个模型中，在两个选择中，只要匹配的院子才会被用于fit</p><p><strong>晕了的话我们就来看看例子</strong></p><p>借用我最近看的算法图解的书来说，我们都是视觉型学习者</p><p>align：</p><p>官方给的例子是1oky, 1t46</p><p>在pymol进行align比较，rmsd = 1.306</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315173226326.png" alt="image-20210315173226326"></p><p>我们来看看他的序列相似度</p><p>虽然，我有时候并不喜欢做图，但是，我们可以比较容易的从图中获得其序列相对而言比较保守的信息</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315173805551.png" alt="image-20210315173805551"></p><p>然后我们在看看看super，官方给的案例是</p><p>1F9J，1YX5，rmsd = 0.717</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315174136972.png" alt="image-20210315174136972"></p><p>两者的序列相似度，很不相似</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315174349940.png" alt="image-20210315174349940"></p><p>我使用了align方法，对齐比较了一下，rmsd = 13.697</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315174508859.png" alt="image-20210315174508859"></p><p>然后，我们来看cealign，官方给的案例：1c0mB，1bco，rmsd = 4.958</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315174718512.png" alt="image-20210315174718512"></p><p>序列相似度</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315175038498.png" alt="image-20210315175038498"></p><p>最后，我们看来看下fit</p><p>所用的比较部分为1a00的a链和c链，rmsd =0.564，当然这个需要的对比条件比较严格，</p><p>object的id必须要严格保持一致，比如segi, chain，如果不一致那么需要手动整</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210315175925035.png" alt="image-20210315175925035"></p><p>到这里，基本上和python没什么用</p><p>但是，强制有用</p><p>举个例子，假设，我有10个蛋白需要比较，计算rmsd</p><p>此处，以aligh为例</p><p>蛋白为：6BHT,4WYM,6OBH,6ECN,5HGL,2PWM,2PWO,6ECO,6OMT,3J3Y</p><p>开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动pymol</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pymol</span><br><span class="line"></span><br><span class="line">Feature has expired.</span><br><span class="line">Feature:       PYMOL_MAIN</span><br><span class="line">Expire date:   01-nov-<span class="number">2020</span></span><br><span class="line">License path:  /Users/sujiaqi/.pymol/license.lic:</span><br><span class="line">FlexNet Licensing error:-<span class="number">10</span>,<span class="number">32</span></span><br><span class="line">For further information, refer to the FlexNet Licensing documentation,</span><br><span class="line">available at <span class="string">&quot;www.flexerasoftware.com&quot;</span>.</span><br><span class="line"><span class="comment"># 将pdb id号存储为list</span></span><br><span class="line">In [<span class="number">2</span>]: pdb_list = [<span class="string">&#x27;6BHT&#x27;</span>,<span class="string">&#x27;4WYM&#x27;</span>,<span class="string">&#x27;6OBH&#x27;</span>,<span class="string">&#x27;6ECN&#x27;</span>,<span class="string">&#x27;5HGL&#x27;</span>,<span class="string">&#x27;2PWM&#x27;</span>,<span class="string">&#x27;2PWO&#x27;</span>,<span class="string">&#x27;6ECO&#x27;</span>,<span class="string">&#x27;6OM</span></span><br><span class="line"><span class="string">   ...: T&#x27;</span>,<span class="string">&#x27;3J3Y&#x27;</span>]</span><br><span class="line"><span class="comment"># 获取蛋白</span></span><br><span class="line">In [<span class="number">5</span>]: <span class="keyword">for</span>  i <span class="keyword">in</span> pdb_list:</span><br><span class="line">   ...:     pymol.cmd.fetch(i)</span><br><span class="line">   ...:</span><br><span class="line"> PyMOL <span class="keyword">not</span> running, entering library mode (experimental)</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line"> <span class="comment"># 查看object名单</span></span><br><span class="line">In [<span class="number">6</span>]: pymol.cmd.get_object_list()</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">[<span class="string">&#x27;6BHT&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;4WYM&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;6OBH&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;6ECN&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;5HGL&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2PWM&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;2PWO&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;6ECO&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;6OMT&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;3J3Y&#x27;</span>]</span><br><span class="line"> <span class="comment"># 两两比较rmsd</span></span><br><span class="line"> <span class="comment"># 构建两两组合表</span></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: combinations = <span class="built_in">list</span>(itertools.combinations(pdb_list, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: combinations</span><br><span class="line">Out[<span class="number">9</span>]:</span><br><span class="line">[(<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;4WYM&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;6OBH&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;6ECN&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;5HGL&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;2PWM&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;2PWO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;6ECO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6BHT&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;6OBH&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;6ECN&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;5HGL&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;2PWM&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;2PWO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;6ECO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;4WYM&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OBH&#x27;</span>, <span class="string">&#x27;6ECN&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OBH&#x27;</span>, <span class="string">&#x27;5HGL&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OBH&#x27;</span>, <span class="string">&#x27;2PWM&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OBH&#x27;</span>, <span class="string">&#x27;2PWO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OBH&#x27;</span>, <span class="string">&#x27;6ECO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OBH&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OBH&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECN&#x27;</span>, <span class="string">&#x27;5HGL&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECN&#x27;</span>, <span class="string">&#x27;2PWM&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECN&#x27;</span>, <span class="string">&#x27;2PWO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECN&#x27;</span>, <span class="string">&#x27;6ECO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECN&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECN&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;5HGL&#x27;</span>, <span class="string">&#x27;2PWM&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;5HGL&#x27;</span>, <span class="string">&#x27;2PWO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;5HGL&#x27;</span>, <span class="string">&#x27;6ECO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;5HGL&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;5HGL&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;2PWM&#x27;</span>, <span class="string">&#x27;2PWO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;2PWM&#x27;</span>, <span class="string">&#x27;6ECO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;2PWM&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;2PWM&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;2PWO&#x27;</span>, <span class="string">&#x27;6ECO&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;2PWO&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;2PWO&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECO&#x27;</span>, <span class="string">&#x27;6OMT&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6ECO&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>),</span><br><span class="line"> (<span class="string">&#x27;6OMT&#x27;</span>, <span class="string">&#x27;3J3Y&#x27;</span>)]</span><br><span class="line">                    </span><br><span class="line"> <span class="comment"># 使用align进行比较,然后计算一下时间</span></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">import</span> time</span><br><span class="line">   ...: a = time.time()</span><br><span class="line">   ...: print(pymol.cmd.align(combinations[<span class="number">0</span>][<span class="number">0</span>],combinations[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">   ...: b = time.time()</span><br><span class="line">   ...: b - a</span><br><span class="line">(<span class="number">0.797596275806427</span>, <span class="number">17935</span>, <span class="number">5</span>, <span class="number">1.2639384269714355</span>, <span class="number">19167</span>, <span class="number">14602.0</span>, <span class="number">2772</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">3.0302011966705322</span></span><br><span class="line">                  </span><br></pre></td></tr></table></figure><p>输出的7个值为</p><p>This returns a list with 7 items:</p><ol><li>RMSD after refinement</li><li>Number of aligned atoms after refinement</li><li>Number of refinement cycles</li><li>RMSD before refinement</li><li>Number of aligned atoms before refinement</li><li>Raw alignment score</li><li>Number of residues aligned</li></ol><p>简而言之，选择第一个就够用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我可以把cmd的指令遍历一次，这样就不需要愁拖稿了hhh&lt;/p&gt;
&lt;p&gt;我们来看下蛋白质的中的结构比较&lt;/p&gt;
&lt;p&gt;在结构比较中，你可以很方便的使用align对两个object进行比较&lt;/p&gt;
&lt;p&gt;这里的object你可以简单的理解为蛋白&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你可</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.20.实例.1-PyMol.1-导入蛋白，创建蛋白</title>
    <link href="http://example.com/2021/03/14/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.20.%E5%AE%9E%E4%BE%8B.1-PyMol.1/"/>
    <id>http://example.com/2021/03/14/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.20.%E5%AE%9E%E4%BE%8B.1-PyMol.1/</id>
    <published>2021-03-14T04:01:34.886Z</published>
    <updated>2021-03-19T06:08:01.761Z</updated>
    
    <content type="html"><![CDATA[<p>已经写到20了，我知道你们也有点烦了</p><p>姑且认为以前的都会了吧</p><p>今天写PyMol</p><p><del>然后这次水一波PyMol</del></p><ol><li><p>安装</p><ul><li><p>官网：<a href="https://pymol.org/2/">https://pymol.org/2/</a></p></li><li><p>开源版本：<a href="https://sourceforge.net/projects/pymol/">https://sourceforge.net/projects/pymol/</a></p></li><li><p>或者假设你已经安装了<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">conda</a></p></li></ul><p>​        命令行安装：<code>conda install -c schrodinger pymol-bundle</code></p></li><li><p>使用</p><p>当然你可以在某一环境下，直接输入pymol，打开可视化界面</p><p>类似于这样</p><p>当然，这并不是我们的主题</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/Screen%20Shot%202021-03-14%20at%2010.43.41%20AM-5689935.png" alt="Screen Shot 2021-03-14 at 10.43.41 AM"></p><p>这次，直接打开<code>ipython</code></p><p>我的使用界面</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/Screen%20Shot%202021-03-14%20at%2010.47.52%20AM.png" alt="Screen Shot 2021-03-14 at 10.47.52 AM"></p></li><li><p>pymol 的api</p><p>api：看下释义，懒得解释</p><blockquote><p>API（Application Programming Interface，<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3/10418844">应用程序接口</a>）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 [1] 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。源于百度百科</p></blockquote><p>其实，就是pymol给我提供了一些简单的接口命令，让我们可以更加方便的使用</p><p>首先，来获取一个蛋白</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pymol</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> pymol</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: Feature has expired.</span><br><span class="line">Feature:       PYMOL_MAIN</span><br><span class="line">Expire date:   01-nov-<span class="number">2020</span></span><br><span class="line">License path:  /Users/sujiaqi/.pymol/license.lic:</span><br><span class="line">FlexNet Licensing error:-<span class="number">10</span>,<span class="number">32</span></span><br><span class="line">For further information, refer to the FlexNet Licensing documentation,</span><br><span class="line">available at <span class="string">&quot;www.flexerasoftware.com&quot;</span>.</span><br><span class="line"><span class="comment"># 看下帮助指令</span></span><br><span class="line">In [<span class="number">14</span>]: <span class="built_in">help</span>(pymol)</span><br><span class="line">Help on package pymol:</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    pymol</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">    PyMOL Molecular Graphics System</span><br><span class="line">    Copyright (c) Schrodinger, Inc.</span><br><span class="line"></span><br><span class="line">    Supported ways to launch PyMOL:</span><br><span class="line"></span><br><span class="line">      If $PYMOL_PATH <span class="keyword">is</span> a non-default location, it must be <span class="built_in">set</span> <span class="keyword">and</span> exported</span><br><span class="line">      before launching PyMOL.</span><br><span class="line"></span><br><span class="line">      From a terminal:</span><br><span class="line"></span><br><span class="line">        shell&gt; python /path/to/pymol/__init__.py [args]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取蛋白3nss</span></span><br><span class="line">In [<span class="number">5</span>]: pymol.cmd.fetch(<span class="string">&#x27;3nss&#x27;</span>)</span><br><span class="line"> PyMOL <span class="keyword">not</span> running, entering library mode (experimental)</span><br><span class="line"> ExecutiveLoad-Detail: Detected mmCIF</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">&#x27;3nss&#x27;</span></span><br><span class="line"><span class="comment"># 查看object </span></span><br><span class="line">In [<span class="number">10</span>]: pymol.cmd.get_object_list()</span><br><span class="line">Out[<span class="number">10</span>]: [<span class="string">&#x27;3nss&#x27;</span>]</span><br><span class="line"><span class="comment"># 将object保存为fasta格式</span></span><br><span class="line">In [<span class="number">23</span>]: pymol.cmd.save(<span class="string">&#x27;3nss.fasta&#x27;</span>,<span class="string">&#x27;3nss&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;fasta&#x27;</span>)</span><br><span class="line">&gt;3nss_A</span><br><span class="line">SVKLAGNSSLCPVSGWAIYSKDNSVRIGSKGDVFVIREPFISCSPLECRTFFLTQGALLNDKHSNGTIKD</span><br><span class="line">RSPYRTLMSCPIGEVPSPYNSRFESVAWSASACHDGINWLTIGISGPDNGAVAVLKYNGIITDTIKSWRN</span><br><span class="line">NILRTQESECACVNGSCFTVMTDGPSNGQASYKIFRIEKGKIVKSVEMNAPNYHYEECSCYPDSSEITCV</span><br><span class="line">CRDNWHGSNRPWVSFNQNLEYQIGYICSGIFGDNPRPNDKTGSCGPVSSNGANGVKGFSFKYGNGVWIGR</span><br><span class="line">TKSISSRNGFEMIWDPNGWTGTDNNFSIKQDIVGINEWSGYSGSFVQHPELTGLDCIRPCFWVELIRGRP</span><br><span class="line">KENTIWTSGSSISFCGVNSDTVGWSWPDGAELPFTIDK</span><br><span class="line">&gt;3nss_B</span><br><span class="line">SVKLAGNSSLCPVSGWAIYSKDNSVRIGSKGDVFVIREPFISCSPLECRTFFLTQGALLNDKHSNGTIKD</span><br><span class="line">RSPYRTLMSCPIGEVPSPYNSRFESVAWSASACHDGINWLTIGISGPDNGAVAVLKYNGIITDTIKSWRN</span><br><span class="line">NILRTQESECACVNGSCFTVMTDGPSNGQASYKIFRIEKGKIVKSVEMNAPNYHYEECSCYPDSSEITCV</span><br><span class="line">CRDNWHGSNRPWVSFNQNLEYQIGYICSGIFGDNPRPNDKTGSCGPVSSNGANGVKGFSFKYGNGVWIGR</span><br><span class="line">TKSISSRNGFEMIWDPNGWTGTDNNFSIKQDIVGINEWSGYSGSFVQHPELTGLDCIRPCFWVELIRGRP</span><br><span class="line">KENTIWTSGSSISFCGVNSDTVGWSWPDGAELPFTIDK</span><br><span class="line"><span class="comment"># 然后，我们看下蛋白结构</span></span><br><span class="line"><span class="comment"># 两条链，有离子，有水，有配体</span></span><br><span class="line"><span class="comment"># 你打开pymol就好了，命令行下，我现在没有找到一个比较好的显示蛋白信息的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，我们再来创建一个新的蛋白，使用fab指令</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   In [<span class="number">8</span>]: <span class="built_in">help</span>(pymol.cmd.fab)</span><br><span class="line">Help on function fab <span class="keyword">in</span> module pymol.editor:</span><br><span class="line">   fab(<span class="built_in">input</span>, name=<span class="literal">None</span>, mode=<span class="string">&#x27;peptide&#x27;</span>, resi=<span class="number">1</span>, chain=<span class="string">&#x27;&#x27;</span>, segi=<span class="string">&#x27;&#x27;</span>, state=-<span class="number">1</span>, <span class="built_in">dir</span>=<span class="number">1</span>, hydro=-<span class="number">1</span>, ss=<span class="number">0</span>, async_=<span class="number">0</span>, quiet=<span class="number">1</span>, _self=&lt;module <span class="string">&#x27;pymol.cmd&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/Users/sujiaqi/miniconda3/envs/py3/lib/python3.7/site-packages/pymol/cmd.py&#x27;</span>&gt;, **kwargs)</span><br><span class="line"> DESCRIPTION</span><br><span class="line">   </span><br><span class="line">        Build a peptide</span><br><span class="line">    </span><br><span class="line">    ARGUMENTS</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">str</span>: sequence <span class="keyword">in</span> one-letter code</span><br><span class="line">    </span><br><span class="line">        name = <span class="built_in">str</span>: name of <span class="built_in">object</span> to create &#123;default: &#125;</span><br><span class="line">    </span><br><span class="line">        ss = <span class="built_in">int</span>: Secondary structure <span class="number">1</span>=alpha helix, <span class="number">2</span>=antiparallel beta, <span class="number">3</span>=parallel beta, <span class="number">4</span>=flat</span><br><span class="line">    </span><br><span class="line">    EXAMPLE</span><br><span class="line">    </span><br><span class="line">        fab ACDEFGH</span><br><span class="line">        fab ACDEFGH, helix, ss=<span class="number">1</span></span><br><span class="line">   In [<span class="number">10</span>]: pymol.cmd.fab(<span class="string">&#x27;ACDEFGH&#x27;</span>, <span class="string">&#x27;helix&#x27;</span>, ss=<span class="number">1</span>)</span><br><span class="line">   <span class="comment"># 看下object列表</span></span><br><span class="line">   In [<span class="number">11</span>]:  pymol.cmd.get_object_list()</span><br><span class="line">   Out[<span class="number">11</span>]: [<span class="string">&#x27;3nss&#x27;</span>, <span class="string">&#x27;helix&#x27;</span>]</span><br><span class="line">   <span class="comment"># 保存</span></span><br><span class="line">   In [<span class="number">13</span>]: pymol.cmd.save(<span class="string">&#x27;helix.pdb&#x27;</span>,<span class="string">&#x27;helix&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;pdb&#x27;</span>)</span><br><span class="line">   <span class="comment"># 你可以使用jupyter notebook进行查看，bio3d包</span></span><br><span class="line">   <span class="comment"># 也可以使用pymol直接打开进行查看</span></span><br></pre></td></tr></table></figure><p>   <img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/image-20210314115756456.png" alt="image-20210314115756456"></p><p>水文结束，see u.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;已经写到20了，我知道你们也有点烦了&lt;/p&gt;
&lt;p&gt;姑且认为以前的都会了吧&lt;/p&gt;
&lt;p&gt;今天写PyMol&lt;/p&gt;
&lt;p&gt;&lt;del&gt;然后这次水一波PyMol&lt;/del&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;官网：&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.19.异常</title>
    <link href="http://example.com/2021/03/12/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.19.%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2021/03/12/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.19.%E5%BC%82%E5%B8%B8/</id>
    <published>2021-03-12T02:41:08.297Z</published>
    <updated>2021-03-12T02:41:08.297Z</updated>
    
    <content type="html"><![CDATA[<p>我们在运行python程序时，经常会出现一些异常。</p><p>异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.</p><ul><li><p>有可能是你自己写错了</p></li><li><p>也有可能是程序本身无法处理</p></li></ul><p>但是，活得干呀，我们现在就来看下怎么处理异常</p><p>python内部有很多异常，可以向用户直接汇报出信息</p><p>来看下python本身的异常</p><p>摘自：<a href="https://www.php.cn/python/python-exceptions.html">https://www.php.cn/python/python-exceptions.html</a></p><table><thead><tr><th>异常名称</th><th>描述</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>BaseException</td><td>所有异常的基类</td></tr><tr><td>SystemExit</td><td>解释器请求退出</td></tr><tr><td>KeyboardInterrupt</td><td>用户中断执行(通常是输入^C)</td></tr><tr><td>Exception</td><td>常规错误的基类</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>GeneratorExit</td><td>生成器(generator)发生异常来通知退出</td></tr><tr><td>StandardError</td><td>所有的内建标准异常的基类</td></tr><tr><td>ArithmeticError</td><td>所有数值计算错误的基类</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ZeroDivisionError</td><td>除(或取模)零 (所有数据类型)</td></tr><tr><td>AssertionError</td><td>断言语句失败</td></tr><tr><td>AttributeError</td><td>对象没有这个属性</td></tr><tr><td>EOFError</td><td>没有内建输入,到达EOF 标记</td></tr><tr><td>EnvironmentError</td><td>操作系统错误的基类</td></tr><tr><td>IOError</td><td>输入/输出操作失败</td></tr><tr><td>OSError</td><td>操作系统错误</td></tr><tr><td>WindowsError</td><td>系统调用失败</td></tr><tr><td>ImportError</td><td>导入模块/对象失败</td></tr><tr><td>LookupError</td><td>无效数据查询的基类</td></tr><tr><td>IndexError</td><td>序列中没有此索引(index)</td></tr><tr><td>KeyError</td><td>映射中没有这个键</td></tr><tr><td>MemoryError</td><td>内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td>NameError</td><td>未声明/初始化对象 (没有属性)</td></tr><tr><td>UnboundLocalError</td><td>访问未初始化的本地变量</td></tr><tr><td>ReferenceError</td><td>弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>SyntaxError</td><td>Python 语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab 和空格混用</td></tr><tr><td>SystemError</td><td>一般的解释器系统错误</td></tr><tr><td>TypeError</td><td>对类型无效的操作</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>UnicodeError</td><td>Unicode 相关的错误</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode 解码时的错误</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode 编码时错误</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode 转换时错误</td></tr><tr><td>Warning</td><td>警告的基类</td></tr><tr><td>DeprecationWarning</td><td>关于被弃用的特征的警告</td></tr><tr><td>FutureWarning</td><td>关于构造将来语义会有改变的警告</td></tr><tr><td>OverflowWarning</td><td>旧的关于自动提升为长整型(long)的警告</td></tr><tr><td>PendingDeprecationWarning</td><td>关于特性将会被废弃的警告</td></tr><tr><td>RuntimeWarning</td><td>可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td>SyntaxWarning</td><td>可疑的语法的警告</td></tr><tr><td>UserWarning</td><td>用户代码生成的警告</td></tr></tbody></table><p>我们在运行程序时，需要捕捉或者避开这些异常</p><p>就可以使用<code>try expect</code> 这个语句</p><p>一般使用情景是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">判断语句或者执行语句</span><br><span class="line"><span class="keyword">except</span> 报错名称：</span><br><span class="line">报错之后的处理语句（你也可以简单打印）</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  如果没有的报错的话，可以在这里执行</span><br><span class="line">  例如：</span><br><span class="line">  print(<span class="string">&#x27;No Bug,happy&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  扫尾语句</span><br></pre></td></tr></table></figure><p>你也可以处理多个异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">判断语句或者执行语句</span><br><span class="line"><span class="keyword">except</span>(Exception1[, Exception2[,...ExceptionN]]]):</span><br><span class="line">报错之后的处理语句（你也可以简单打印）</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  如果没有的报错的话，可以在这里执行</span><br><span class="line">  例如：</span><br><span class="line">  print(<span class="string">&#x27;No Bug,happy&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  扫尾语句</span><br></pre></td></tr></table></figure><p>当然，你也可以使用<code>expect:</code>来直接跳过所有异常</p><p>但是，我并不建议使用，因为这比较容易隐藏一些bug</p><p>而且你应该尽量减少<code>try expect</code> 中的代码量，毕竟，你是补货异常并处理，而不是再制造一个异常</p><p>此外还有一种格式<code> try  finally</code> </p><p>finally 通常放在最后作为扫尾工作</p><p>在整个异常处理机制中，finally 语句的功能是：无论 try 块是否发生异常，最终都要进入 finally 语句，并执行其中的代码块。</p><p>其实try expect的最简形式为·：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">判断语句或者执行语句</span><br><span class="line"><span class="keyword">except</span> 报错名称：</span><br><span class="line">报错之后的处理语句（你也可以简单打印）</span><br></pre></td></tr></table></figure><p>我们来看个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">   ...:     print(a[i])</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">2</span>-2cb727696c4c&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">----&gt; 2     print(a[i])</span><br><span class="line">      <span class="number">3</span></span><br><span class="line"></span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><p>此时报错是IndexError </p><p>接下来，我们来捕获他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: <span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">   ...:     <span class="keyword">try</span>:</span><br><span class="line">   ...:         print(a[i])</span><br><span class="line">   ...:     <span class="keyword">except</span> IndexError:</span><br><span class="line">   ...:         print(<span class="string">&#x27;find index error&#x27;</span>)</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">find index error</span><br></pre></td></tr></table></figure><p>上面是，我们发现了一个index error ，然后捕获了他</p><p>然后我们，在加入else看下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: <span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">   ...:     <span class="keyword">try</span>:</span><br><span class="line">   ...:         print(a[i])</span><br><span class="line">   ...:     <span class="keyword">except</span> IndexError:</span><br><span class="line">   ...:         print(<span class="string">&#x27;find index error&#x27;</span>)</span><br><span class="line">   ...:     <span class="keyword">else</span>:</span><br><span class="line">   ...:         print(<span class="string">&#x27;no bug,lucky&#x27;</span>)</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">no bug,lucky</span><br><span class="line"><span class="number">2</span></span><br><span class="line">no bug,lucky</span><br><span class="line"><span class="number">3</span></span><br><span class="line">no bug,lucky</span><br><span class="line"><span class="number">4</span></span><br><span class="line">no bug,lucky</span><br><span class="line">find index error</span><br></pre></td></tr></table></figure><p>我们可以很明显的看出，程序是先执行try except,再执行else</p><p>我再加finally试一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> i <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">   ...:     <span class="keyword">try</span>:</span><br><span class="line">   ...:         print(a[i])</span><br><span class="line">   ...:     <span class="keyword">except</span> IndexError:</span><br><span class="line">   ...:         print(<span class="string">&#x27;find index error&#x27;</span>)</span><br><span class="line">   ...:     <span class="keyword">else</span>:</span><br><span class="line">   ...:         print(<span class="string">&#x27;no bug,lucky&#x27;</span>)</span><br><span class="line">   ...:     <span class="keyword">finally</span>:</span><br><span class="line">   ...:         print(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">no bug,lucky</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">no bug,lucky</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">no bug,lucky</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">no bug,lucky</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">find index error</span><br><span class="line"><span class="keyword">finally</span></span><br></pre></td></tr></table></figure><p>我们可以看到，不管是是否出现异常总会有finally中的语句被执行</p><p>而只有不报错时，else中的语句才会被执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们在运行python程序时，经常会出现一些异常。&lt;/p&gt;
&lt;p&gt;异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有可能是你自己写错了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也有可能是程序本身无法处理&lt;/p&gt;
&lt;/li&gt;
&lt;/</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>PyMOl教学-在肽段两端加分子</title>
    <link href="http://example.com/2021/03/11/python-every-day/PyMOl%E6%95%99%E5%AD%A6-%E5%9C%A8%E8%82%BD%E6%AE%B5%E4%B8%A4%E7%AB%AF%E5%8A%A0%E5%88%86%E5%AD%90/"/>
    <id>http://example.com/2021/03/11/python-every-day/PyMOl%E6%95%99%E5%AD%A6-%E5%9C%A8%E8%82%BD%E6%AE%B5%E4%B8%A4%E7%AB%AF%E5%8A%A0%E5%88%86%E5%AD%90/</id>
    <published>2021-03-11T14:49:31.266Z</published>
    <updated>2021-03-11T14:49:31.267Z</updated>
    
    <content type="html"><![CDATA[<p>1: 打开pymol</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1: 打开pymol&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PyMol-把它当作一个包来使</title>
    <link href="http://example.com/2021/03/11/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/PyMol-%E6%8A%8A%E5%AE%83%E5%BD%93%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%8C%85%E6%9D%A5%E4%BD%BF/"/>
    <id>http://example.com/2021/03/11/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/PyMol-%E6%8A%8A%E5%AE%83%E5%BD%93%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%8C%85%E6%9D%A5%E4%BD%BF/</id>
    <published>2021-03-11T12:29:29.630Z</published>
    <updated>2021-03-11T12:29:29.630Z</updated>
    
    <content type="html"><![CDATA[<p>来，先看原网攻略：<a href="https://pymolwiki.org/index.php/Jupyter">https://pymolwiki.org/index.php/Jupyter</a></p><p>养成好习惯</p><p>我们都知道pymol有两种操作方式，一种是鼠标，一种是命令行，当然你如果把我使用sony手柄的那个算第三种的话，我也不反对。</p><p>传送门：<a href="https://mp.weixin.qq.com/s?__biz=MzIxMzI2OTc2MQ==&amp;mid=2651144233&amp;idx=1&amp;sn=b78161417f999ff9a580c5023e9db5b9&amp;chksm=8c488c47bb3f05517916860cee68d15562b513d0d4278685217c29f23582f5c0932b4a9a5ad6&amp;token=95851457&amp;lang=zh_CN#rd">https://mp.weixin.qq.com/s?__biz=MzIxMzI2OTc2MQ==&amp;mid=2651144233&amp;idx=1&amp;sn=b78161417f999ff9a580c5023e9db5b9&amp;chksm=8c488c47bb3f05517916860cee68d15562b513d0d4278685217c29f23582f5c0932b4a9a5ad6&amp;token=95851457&amp;lang=zh_CN#rd</a></p><p>**但是，现在的问题是 **</p><ol><li>pymol的功能是如此的强大，如何更加有效的使用</li><li>pymol自带的命令行工具，对于我来说简直是魔鬼，而且，对于一个三维可视化工具，命令行总感觉不如鼠标更有感觉</li></ol><p>所以，我目前遇见的一个问题是，怎么去对比两个蛋白</p><p>pymol是个包，我用conda安装</p><p>所以，我们就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="keyword">import</span> pymol2</span><br><span class="line">   ...: p1 = pymol2.PyMOL()</span><br><span class="line">   ...: p1.start()</span><br><span class="line">   ...: p1.cmd.load(<span class="string">&#x27;1AKE.pdb&#x27;</span>)</span><br><span class="line">   ...: p1.cmd.load(<span class="string">&#x27;1EN2.pdb&#x27;</span>)</span><br><span class="line">   ...: p1.cmd.align(<span class="string">&#x27;1AKE&#x27;</span>,<span class="string">&#x27;1EN2&#x27;</span>)</span><br><span class="line">Out[<span class="number">9</span>]: (<span class="number">3.6471645832061768</span>, <span class="number">42</span>, <span class="number">2</span>, <span class="number">3.824939250946045</span>, <span class="number">43</span>, <span class="number">21.0</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>将pymol作为一个包导入，然后使用cmd对其进行调用，这样就舒服一点</p><p>至于cmd：<a href="https://pymol.org/pymol-command-ref.html">https://pymol.org/pymol-command-ref.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来，先看原网攻略：&lt;a href=&quot;https://pymolwiki.org/index.php/Jupyter&quot;&gt;https://pymolwiki.org/index.php/Jupyter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;养成好习惯&lt;/p&gt;
&lt;p&gt;我们都知道pymol有两种操</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.18.序列化</title>
    <link href="http://example.com/2021/03/09/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.18.%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2021/03/09/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.18.%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-03-09T13:40:32.407Z</published>
    <updated>2021-03-17T05:34:44.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>。。。，我摘抄一个</p><p>系列化，将对象存储为二进制。</p><p>反序列化，将二进制返回为对象。</p><h3 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h3><p>我们再来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件，模式为写入</span></span><br><span class="line">In [<span class="number">1</span>]: f = <span class="built_in">open</span>(<span class="string">&#x27;tmp.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建一个字符串对象</span></span><br><span class="line">In [<span class="number">2</span>]: a= <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="comment"># 将a写入文件</span></span><br><span class="line">In [<span class="number">3</span>]: f.write(a)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">4</span></span><br><span class="line"><span class="comment"># 关闭文件对象</span></span><br><span class="line">In [<span class="number">4</span>]: f.close()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取文件内容</span></span><br><span class="line">In [<span class="number">5</span>]: !cat tmp.txt</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>well，我们上述操作即为创建了一个字符串a，并将字符串写入了文件<code>tmp.txt</code>中</p><p>当然，你可以认为此次操作结束了，你获得了一个含有内容的文件</p><p>但是如果我们想储存的是对象或者说为变量a怎么对待呢，如何将其储存，并在下次启动时仍然可以进行使用.</p><p>Python提供了<code>pickle</code>模块来实现序列化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line">In [<span class="number">6</span>]: <span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">In [<span class="number">8</span>]: f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="comment"># 将变量a输入到文件中</span></span><br><span class="line">In [<span class="number">9</span>]: pickle.dump(a,f)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">In [<span class="number">10</span>]: f.close()</span><br></pre></td></tr></table></figure><p>那么我们就可以在下次启动的时候，使用反序列化获得a</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">In [<span class="number">11</span>]: f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">In [<span class="number">12</span>]: b = pickle.load(f)</span><br><span class="line"><span class="comment"># 查看b</span></span><br><span class="line">In [<span class="number">13</span>]: b</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">&#x27;1234&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;。。。，我摘抄一个&lt;/p&gt;
&lt;p&gt;系列化，将对象存储为二进制。&lt;/p&gt;
&lt;p&gt;反序列化，将二进制返回为对象。&lt;/p&gt;
&lt;h3 id=&quot;释义&quot;</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.17.文件读写</title>
    <link href="http://example.com/2021/03/08/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.17.%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    <id>http://example.com/2021/03/08/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.17.%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</id>
    <published>2021-03-08T14:06:44.460Z</published>
    <updated>2021-03-09T13:31:19.822Z</updated>
    
    <content type="html"><![CDATA[<p>well，我们很多基本的操作都属于I/O流</p><p>假设你只是一个黑盒子用户的话，大概只需要调取参数，获取自己所需的文件然后进行下一步操作即可</p><p>我们现在就来看下python的I/O流</p><ol><li><p>读取一个文件</p><p>我们以<code>1stp.pdb</code>这个蛋白为例</p><p>下载地址在这里：<a href="http://www.rcsb.org/structure/1STP">http://www.rcsb.org/structure/1STP</a></p><p><img src="/Users/sujiaqi/Pictures/Typora/image-20210308214614070.png" alt="image-20210308214614070"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 我们可以直接使用python自带的os函数打开</span><br><span class="line">In [1]: f &#x3D; open(&#39;1stp.pdb&#39;,&#39;r&#39;)</span><br></pre></td></tr></table></figure></li></ol><p>​    其基本形式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f &#x3D; open(文件名，打开模式)</span><br><span class="line"></span><br><span class="line">各个参数的细节如下：</span><br><span class="line">- 文件名：文件名是一个字符串值。</span><br><span class="line">- 打开模式：只读（r），写入(w)，追加(w+)等。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里有一份来源于菜鸟教程的，使用不同模式打开文件的说明</p><p>   当然，你并不需要全文背诵，只需要知道几个常用值就好：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>t</td><td>文本模式 (默认)。</td></tr><tr><td>x</td><td>写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td>二进制模式。</td></tr><tr><td>+</td><td>打开一个文件进行更新(可读可写)。</td></tr><tr><td>U</td><td>通用换行模式（不推荐）。</td></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>在我们打开文本对象之后，下一步该做的就是提取字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: f_str = f.read()</span><br><span class="line">In [<span class="number">5</span>]: f_str[:<span class="number">300</span>]</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">&#x27;HEADER    BIOTIN BINDING PROTEIN                  12-MAR-92   1STP              \nTITLE     STRUCTURAL ORIGINS OF HIGH-AFFINITY BIOTIN BINDING TO STREPTAVIDIN    \nCOMPND    MOL_ID: 1;                                                            \nCOMPND   2 MOLECULE: STREPTAVIDIN COMPLEX WITH BIOTIN;   &#x27;</span></span><br></pre></td></tr></table></figure><p>当执行完成操作之后记得要关闭此对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [6]: f.close()</span><br></pre></td></tr></table></figure><p>此时，你便获取了一部分文字</p><p>现在就可以对其进行编辑，增加删除，然后输出</p><p>此时，我们需要再次打开一个写入对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: f_new = <span class="built_in">open</span>(<span class="string">&#x27;out.pdb&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: f_new.write(f_str)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">119232</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 关闭对象</span></span><br><span class="line">In [<span class="number">9</span>]: f_new.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;well，我们很多基本的操作都属于I/O流&lt;/p&gt;
&lt;p&gt;假设你只是一个黑盒子用户的话，大概只需要调取参数，获取自己所需的文件然后进行下一步操作即可&lt;/p&gt;
&lt;p&gt;我们现在就来看下python的I/O流&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;读取一个文件&lt;/p&gt;
&lt;p&gt;我们以&lt;c</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.16.错误</title>
    <link href="http://example.com/2021/03/07/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.16.%E9%94%99%E8%AF%AF/"/>
    <id>http://example.com/2021/03/07/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.16.%E9%94%99%E8%AF%AF/</id>
    <published>2021-03-07T03:21:07.904Z</published>
    <updated>2021-03-07T09:15:39.256Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Python时报错是不可避免的事情</p><p>我们来看错误的产生以及分类，以及如何对其进行调试</p><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>python有两种错误，十分容易辨别</p><ol><li><p>语法错误</p><p>语法错误是因为不规范的代码引发的，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: <span class="keyword">while</span> <span class="literal">True</span> print(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;ipython-input-3-2b688bc740d7&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> print(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">               ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>引发错误的内容就是少加了一个<code>:</code>，关键词是这个<code>SyntaxError: invalid syntax</code></p></li><li><p>异常</p><p>异常是python另外一个容易遇见的错误，即使你的语法是正常的，在运行期间也有可能遇到错误</p><p>可能原因有变量未定义,int与str搞错等等</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: c = <span class="string">&#x27;nihao&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印出一个未定义的变量</span></span><br><span class="line">In [<span class="number">8</span>]: print(d)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">8</span>-85549cb1de5f&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print(d)</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">&#x27;d&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数和字符串相加</span></span><br><span class="line">In [<span class="number">9</span>]: a + c</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">9</span>-e81e582b6fa9&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 a + c</span><br><span class="line"></span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用Python时报错是不可避免的事情&lt;/p&gt;
&lt;p&gt;我们来看错误的产生以及分类，以及如何对其进行调试&lt;/p&gt;
&lt;h3 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;p&gt;python有两种错</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.15.模块(包)的安装</title>
    <link href="http://example.com/2021/03/06/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.15.%E6%A8%A1%E5%9D%97(%E5%8C%85)%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2021/03/06/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.15.%E6%A8%A1%E5%9D%97(%E5%8C%85)%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2021-03-06T05:58:43.919Z</published>
    <updated>2021-03-07T09:15:32.461Z</updated>
    
    <content type="html"><![CDATA[<p>上一谈中我们使用了Python自带的包进行使用来阐述</p><p>这一部分，我们来看看第三方python包，如何安装，如何使用</p><p>以BioPython为例，难度低，用途比较广</p><p>biopython网站：<a href="https://biopython.org/wiki/Documentation">https://biopython.org/wiki/Documentation</a></p><h3 id="biopython简介"><a href="#biopython简介" class="headerlink" title="biopython简介"></a>biopython简介</h3><p><a href="https://www.yiibai.com/biopython/biopython_introduction.html">Biopython是Python的最大，最受欢迎的生物信息学软件包。它包含许多用于常规生物信息学任务的不同子模块。它由Chapman和Chang开发，主要使用Python编写。它还包含C代码，以优化软件的复杂计算部分。它可以在Windows，Linux，Mac OS X等操作系统上运行。</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>pip</p><p>pip是python的包管理器</p><p><code>pip install biopython</code></p><p>你可以在这个网站上查询需要安装的python包：<a href="https://pypi.org/">https://pypi.org</a></p><p>如果你需要安装特定的biopython版本的话</p><p><code>pip install biopython==version</code></p></li><li><p>conda</p><p>conda是一个强大的开源的软件包管理系统和环境管理系统</p><p>你可以在这个网站上查询需要安装的python包</p><p><code>conda install biopython</code></p><p>如果需要安装特定的版本</p><p><code>conda install biopython=version</code></p></li><li><p>离线安装</p><p>以上两种都属于在线安装，也即为有网状态下</p><p>下面来看下离线状态下如何安装python的第三方包</p><p>首先，我们要找到软件的官网</p><p>然后下载其文件：<a href="http://biopython.org/DIST/biopython-1.78.zip">http://biopython.org/DIST/biopython-1.78.zip</a></p><p>下载完成后，解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user:biopython-1.78/ $ ls                                         [14:17:30]</span><br><span class="line">Bio                DEPRECATED.rst     NEWS.rst           Tests</span><br><span class="line">BioSQL             Doc                PKG-INFO           biopython.egg-info</span><br><span class="line">CONTRIB.rst        LICENSE.rst        README.rst         setup.cfg</span><br><span class="line">CONTRIBUTING.rst   MANIFEST.in        Scripts            setup.py</span><br></pre></td></tr></table></figure><p>  然后，我们直接运行<code>python setup.py install </code></p><p>  就可以进行安装</p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>详细使用的话需要查看其原文档以及手册</p><p><a href="http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec3">http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec3</a></p><p>我们这里的使用以3D模块为例：<a href="http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec178">http://biopython.org/DIST/docs/tutorial/Tutorial.html#sec178</a></p><p>我们需要下载这个文件<code>1fat.cif</code>：<a href="http://files.rcsb.org/download/1FAT.cif">http://files.rcsb.org/download/1FAT.cif</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先导入</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">import</span> Bio</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">In [<span class="number">5</span>]: print(Bio.__version__)</span><br><span class="line"><span class="number">1.78</span></span><br><span class="line">In [<span class="number">15</span>]: <span class="keyword">from</span> Bio.PDB.MMCIFParser <span class="keyword">import</span> MMCIFParser</span><br><span class="line">    ...: parser = MMCIFParser()</span><br><span class="line">In [<span class="number">16</span>]: structure = parser.get_structure(<span class="string">&quot;1fat&quot;</span>, <span class="string">&quot;1fat.cif&quot;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 我们使用biopython获取了1fat这个蛋白的结构信息</span></span><br><span class="line"><span class="comment"># 然后来进行一个简单的示例</span></span><br><span class="line">In [<span class="number">18</span>]: <span class="keyword">for</span> model <span class="keyword">in</span> structure:</span><br><span class="line">    ...:     <span class="keyword">for</span> chain <span class="keyword">in</span> model:</span><br><span class="line">    ...:         <span class="keyword">for</span> residue <span class="keyword">in</span> chain:</span><br><span class="line">    ...:             <span class="keyword">for</span> atom <span class="keyword">in</span> residue:</span><br><span class="line">    ...:                 print(atom)</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line">&lt;Atom O&gt;</span><br><span class="line">&lt;Atom CB&gt;</span><br><span class="line">&lt;Atom CG&gt;</span><br><span class="line">&lt;Atom CD1&gt;</span><br><span class="line">&lt;Atom CD2&gt;</span><br><span class="line">&lt;Atom N&gt;</span><br><span class="line">&lt;Atom CA&gt;</span><br><span class="line">&lt;Atom C&gt;</span><br><span class="line">&lt;Atom O&gt;</span><br><span class="line">&lt;Atom N&gt;</span><br><span class="line">&lt;Atom CA&gt;</span><br><span class="line">&lt;Atom C&gt;</span><br><span class="line">&lt;Atom O&gt;</span><br><span class="line">&lt;Atom CB&gt;</span><br><span class="line">&lt;Atom CG&gt;</span><br><span class="line">&lt;Atom CD1&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>下面是biopython中对于结构的解析</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/smcra.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一谈中我们使用了Python自带的包进行使用来阐述&lt;/p&gt;
&lt;p&gt;这一部分，我们来看看第三方python包，如何安装，如何使用&lt;/p&gt;
&lt;p&gt;以BioPython为例，难度低，用途比较广&lt;/p&gt;
&lt;p&gt;biopython网站：&lt;a href=&quot;https://biopyt</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.14.模块(包)的使用</title>
    <link href="http://example.com/2021/03/05/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.14.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/03/05/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.14.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2021-03-05T06:48:07.054Z</published>
    <updated>2021-03-07T09:15:25.754Z</updated>
    
    <content type="html"><![CDATA[<p>本来打算写类的，但是想了下，写一个类然后打包发布，对于使用者来说难度有点大</p><p>所以我们就简单介绍一下包的使用和安装，足够大家使用就好</p><p><strong>python的一大优势就是有很多的第三方包</strong></p><ul><li><p>蛋白设计：PyRosetta等</p></li><li><p>化学信息学：Rdkit，PyBel，ODDT等</p></li><li><p>生物信息学：BioPython，Dash Bio等</p></li><li><p>AI：Sklearn，Tensorflow，PyTorch等</p></li></ul><p>当你熟练的使用这些包的时候，就可以很方便的使用各个学科的相关知识，降低你的入门难度，</p><p>而一些，你只需要输入**<code>import everything</code>**就可以实现</p><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/OIP.eTnkGiSxg4Ri-FmUNTGIgwHaEh.jpeg" alt="OIP.eTnkGiSxg4Ri-FmUNTGIgwHaEh"></p><p>我们先来看下python自带的一些包</p><p>python内置了一些很有用的模块</p><p>几个例子，<code>os, sys,time</code>等</p><p>我们看下使用</p><p>以<a href="https://www.runoob.com/python/os-file-methods.html">os</a>为例</p><p>os是<code>operating system</code>的缩写，他是python与系统进行交互的接口</p><p>我们来看几个常见的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先import</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#获取当前路径</span></span><br><span class="line">In [<span class="number">2</span>]: os.getcwd()</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">&#x27;/Users/user&#x27;</span></span><br><span class="line"><span class="comment">#显示当前路径下的目录和文件列表</span></span><br><span class="line">In [<span class="number">3</span>]: os.listdir()</span><br><span class="line">Out[<span class="number">3</span>]:</span><br><span class="line">[<span class="string">&#x27;1S2d.pdb&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;knime&#x27;</span>]</span><br><span class="line"><span class="comment"># 更改工作目录</span></span><br><span class="line">In [<span class="number">5</span>]: os.chdir(<span class="string">&#x27;Public/&#x27;</span>)</span><br><span class="line"><span class="comment"># 如果你想看os的相关帮助的话</span></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">help</span>(os)</span><br><span class="line">Help on module os:</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    os - OS routines <span class="keyword">for</span> NT <span class="keyword">or</span> Posix depending on what system we<span class="string">&#x27;re on.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">MODULE REFERENCE</span></span><br><span class="line"><span class="string">    https://docs.python.org/3.8/library/os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The following documentation is automatically generated from the Python</span></span><br><span class="line"><span class="string">    source files.  It may be incomplete, incorrect or include features that</span></span><br><span class="line"><span class="string">    are considered implementation detail and may vary between Python</span></span><br><span class="line"><span class="string">    implementations.  When in doubt, consult the module reference at the</span></span><br><span class="line"><span class="string">    location listed above.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br><span class="line"><span class="string">    This exports:</span></span><br><span class="line"><span class="string">      - all functions from posix or nt, e.g. unlink, stat, etc.</span></span><br><span class="line"><span class="string">      - os.path is either posixpath or ntpath</span></span><br><span class="line"><span class="string">      - os.name is either &#x27;</span>posix<span class="string">&#x27; or &#x27;</span>nt<span class="string">&#x27;</span></span><br><span class="line"><span class="string">      - os.curdir is a string representing the current directory (always &#x27;</span>.<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.pardir is a string representing the parent directory (always &#x27;</span>..<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.sep is the (or a most common) pathname separator (&#x27;</span>/<span class="string">&#x27; or &#x27;</span>\\<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.extsep is the extension separator (always &#x27;</span>.<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">      - os.altsep is the alternate pathname separator (None or &#x27;</span>/<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># 或者只是想看下os这个模块中定义过的函数或者变量</span></span><br><span class="line"><span class="string">In [10]: dir(os)</span></span><br><span class="line"><span class="string">Out[10]:</span></span><br><span class="line"><span class="string">[&#x27;</span>CLD_CONTINUED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>CLD_DUMPED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>CLD_EXITED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>CLD_TRAPPED<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>DirEntry<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_CANTCREAT<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_CONFIG<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_DATAER<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_IOER<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOHOST<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOINPUT<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOPERM<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_NOUSE<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_OK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_OSER<span class="string">R&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_OSFILE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_PROTOCOL<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_SOFTWARE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_TEMPFAIL<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_UNAVAILABLE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>EX_USAGE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_LOCK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_OK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_TEST<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_TLOCK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>F_ULOCK<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>MutableMapping<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>NGROUPS_MAX<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>O_ACCMODE<span class="string">&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;</span>O_APPEND<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来打算写类的，但是想了下，写一个类然后打包发布，对于使用者来说难度有点大&lt;/p&gt;
&lt;p&gt;所以我们就简单介绍一下包的使用和安装，足够大家使用就好&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python的一大优势就是有很多的第三方包&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;蛋白</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.13.列表生成式.2</title>
    <link href="http://example.com/2021/03/04/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.13.%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <id>http://example.com/2021/03/04/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.13.%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</id>
    <published>2021-03-04T05:53:40.756Z</published>
    <updated>2021-03-07T09:15:13.282Z</updated>
    
    <content type="html"><![CDATA[<p> 上篇我们说到了列表生成式</p><p>你可以很简单的通过</p><p><code>a = [i for i in b]</code></p><p>来搭建一个列表</p><p><strong>但是，问题还在于内存</strong>，是不是有种熟悉的味道</p><p>是的，你可以在生成列表之后使用迭代器来减少内存</p><p>其实方法很简单，<del>我是为了水文才拆成了两篇</del>,怕你们记不住</p><p>我们只需要将<code>[]</code>修改为<code>()</code>便可以直接生成一个迭代器</p><p>我们看个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: sys.getsizeof(a)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">9032</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: b = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: sys.getsizeof(b)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">128</span></span><br></pre></td></tr></table></figure><p>我们生成迭代器之后的使用方法和原来的一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>当然，你也可以通过循环来进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: b = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>好，水文结束，大家早午晚安</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 上篇我们说到了列表生成式&lt;/p&gt;
&lt;p&gt;你可以很简单的通过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a = [i for i in b]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;来搭建一个列表&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，问题还在于内存&lt;/strong&gt;，是不是有种熟悉的味道&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.12.列表生成式.1</title>
    <link href="http://example.com/2021/03/03/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.12.%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/"/>
    <id>http://example.com/2021/03/03/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.12.%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F/</id>
    <published>2021-03-03T07:02:47.387Z</published>
    <updated>2021-03-07T09:15:08.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="额"><a href="#额" class="headerlink" title="额"></a>额</h3><p>竟然就到了函数，为什么这么快，我。。。是不是落了一些hh</p><p>来看一个我经常使用的方式</p><p>**列表生成式 **</p><p>一般来说我们如果要创建一个列表的话，那么可选的方案有</p><ol><li><p>直接定义列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li><li><p>将其余数据结构直接列表化</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: b = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">type</span>(b)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="built_in">tuple</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: c = <span class="built_in">list</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">type</span>(c)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: print(c)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>先创建一个空列表，然后往里面塞元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: d = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">   ...:     d.append(i)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: d</span><br><span class="line">Out[<span class="number">10</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">type</span>(d)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>但是python提供了一个更为强大的列表生成方案</p><p>他的一般形式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表 &#x3D; [表达式 for i in 列表]</span><br></pre></td></tr></table></figure><p>当然你也可以复杂一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">列表 &#x3D; [表达式 for i in 列表 判断式]</span><br></pre></td></tr></table></figure><p>那么我们就可以这样使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: a</span><br><span class="line">Out[<span class="number">13</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: a = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a</span><br><span class="line">Out[<span class="number">15</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>甚至于这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: a = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>) <span class="keyword">if</span> i &gt; <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: a</span><br><span class="line">Out[<span class="number">17</span>]: [<span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;额&quot;&gt;&lt;a href=&quot;#额&quot; class=&quot;headerlink&quot; title=&quot;额&quot;&gt;&lt;/a&gt;额&lt;/h3&gt;&lt;p&gt;竟然就到了函数，为什么这么快，我。。。是不是落了一些hh&lt;/p&gt;
&lt;p&gt;来看一个我经常使用的方式&lt;/p&gt;
&lt;p&gt;**列表生成式 **&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.11.函数</title>
    <link href="http://example.com/2021/03/03/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.11.%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/03/03/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.11.%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-02T17:11:24.255Z</published>
    <updated>2021-03-07T09:14:53.484Z</updated>
    
    <content type="html"><![CDATA[<p>手写一个迭代器，不要傻了，在你连函数都不会定义的情况下，我教你手写一个迭代器那是作死。</p><p>迭代器在后方</p><p>我们现在来看看<strong>函数,function</strong>定义</p><p>啥子叫个函数嘞</p><p>先来看看我对他的简化版定义</p><p><strong>当你写的代码太过复杂，不易被管理时，我们对代码所用的一种优化，一种代码的简洁结构</strong></p><p>当然他有一定的规则，来看看函数定义的规则(大部分摘自：<a href="https://www.runoob.com/python3/python3-function.html)%EF%BC%9A">https://www.runoob.com/python3/python3-function.html)：</a></p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称(就是下面的那个max)和圆括号 <code>()</code>，后面再加个冒号<code>:</code>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数内容有缩进。</li><li>使用<code>return</code> 结束函数，函数会返回一个值，结束时不带return的话相当于返回 None。</li></ul><p><img src="https://gitee.com/luskyqi/markdown-png/raw/master/uPic/py-tup-10-26-1.png" alt="img"></p><h4 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">参数</span>):</span></span><br><span class="line"></span><br><span class="line">函数</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h3><p>仍然是<code>hellow world!</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: <span class="function"><span class="keyword">def</span> <span class="title">hw</span>(<span class="params">words</span>):</span></span><br><span class="line">    ...:  print(words)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: hw(<span class="string">&#x27;Hellow World!&#x27;</span>)</span><br><span class="line">Hellow World!</span><br></pre></td></tr></table></figure><p>然后让我们看看有<code>return</code>的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: <span class="function"><span class="keyword">def</span> <span class="title">plus</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    ...:     c = a + b</span><br><span class="line">    ...:     <span class="keyword">return</span> c</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: plus(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: d = plus(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: d</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>当然<code>return</code>在一个函数中也可以多次使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: <span class="function"><span class="keyword">def</span> <span class="title">pick_max</span>(<span class="params">a,b</span>):</span> </span><br><span class="line">    ...:     <span class="keyword">if</span> a &gt; b : </span><br><span class="line">    ...:         <span class="keyword">return</span> a </span><br><span class="line">    ...:     <span class="keyword">else</span>: </span><br><span class="line">    ...:         <span class="keyword">return</span> b </span><br><span class="line">    ...:                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: pick_max(<span class="number">1</span>,<span class="number">2</span>)                                                                                                                                     </span><br><span class="line">Out[<span class="number">73</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: c = pick_max(<span class="number">1</span>,<span class="number">2</span>)                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: c                                                                                                                                                 </span><br><span class="line">Out[<span class="number">75</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>我们来看下传参</p><ol><li><p>必须参数</p><p>你函数定义了一个参数，此函数必须要有相对应地参数否则运行便会报错</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: <span class="function"><span class="keyword">def</span> <span class="title">hw</span>(<span class="params">words</span>):</span></span><br><span class="line">    ...:     print(words)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: hw()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">21</span>-9982e5434f2d&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 hw()</span><br><span class="line"></span><br><span class="line">TypeError: hw() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;words&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>默认参数</p><p>我们有时会给参数加一些默认值，如果运行函数时传入修改的参数的话，那么函数一般运行便会使用默认值</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: <span class="function"><span class="keyword">def</span> <span class="title">hw</span>(<span class="params">a,b,c = <span class="number">5</span></span>):</span></span><br><span class="line">    ...:     print(a)</span><br><span class="line">    ...:     print(b)</span><br><span class="line">    ...:     print(c)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: hw(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: hw(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>可变参数</p><p>顾名思义，可变参数就是参数的个数是可变的，可以是1个也可以是n个</p><p>一般使用<code>*参数名</code>来进行表示,有时候你会常常看到这种形式<code>*args</code></p><p><code>*</code>参数用于解包tuple对象的每个元素，作为一个一个的位置参数传入到函数中</p><p>来举个例子，我想要计算（1，2，3，4）之间的加和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    ...:     <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    ...:     <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">    ...:         <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    ...:     <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">55</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*args</span>):</span></span><br><span class="line">    ...:     <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    ...:     <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">    ...:         <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    ...:     <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]:   calc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">31</span>]: <span class="number">30</span></span><br></pre></td></tr></table></figure><p>如果我们有一个列表或者元祖，如和进行传参呢</p><p>例如： a = [1,2,3,4]</p><p>这样？<code>calc(a[0],a[1],a[2],a[3])</code></p><p>虽然可行，但是太过赘述，python中容许在列表或者元祖前加<code>*</code>，将其作为可变参数传入</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">*args</span>):</span></span><br><span class="line">    ...:     <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    ...:     <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">    ...:         <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    ...:     <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: calc(*a)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">30</span></span><br></pre></td></tr></table></figure><p>还有另外一种形式<code>**karg</code>,使用这种形式参数在函数内部组装为一个dict。</p><p>我们来看个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: <span class="function"><span class="keyword">def</span> <span class="title">see</span>(<span class="params">**kw</span>):</span></span><br><span class="line">    ...:     print(kw)</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: see(a = <span class="number">1</span>,b = <span class="number">2</span>,c = <span class="number">3</span>,d = <span class="number">4</span>)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>命名关键字参数</p><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。</p><p>但是，我们需要检查某些关键字，以便查看使用者输入的参数是否是正确的。</p><p>。。。</p><p>把自己当作那些一无所知的用户吧，为他们设身处地的想想。</p><p>我们需要检查，用户的参数输入是否符合我们的标准</p><p>形式为<code>*,关键字,关键字</code></p><p>例如：我们需要检查用户是否输入了<code>id</code>,<code>smi</code>这两个参数，化学信息学初步引入hhh</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">45</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">*,<span class="built_in">id</span>,smi</span>):</span></span><br><span class="line">    ...:     print(<span class="built_in">id</span>,smi)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: get(<span class="built_in">id</span>=<span class="number">1</span>,smi=<span class="string">&#x27;c1ccccc1&#x27;</span>)</span><br><span class="line"><span class="number">1</span> c1ccccc1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果缺少id</span></span><br><span class="line">In [<span class="number">47</span>]: get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">47</span>-f3ae4c96f67d&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 get(id=1)</span><br><span class="line"></span><br><span class="line">TypeError: get() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;smi&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果缺少smi</span></span><br><span class="line">In [<span class="number">48</span>]: get(smi = <span class="string">&#x27;c1ccccc1&#x27;</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">48</span>-988e95298c74&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 get(smi = &#x27;c1ccccc1&#x27;)</span><br><span class="line"></span><br><span class="line">TypeError: get() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;id&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>参数组合</p><p>额，我就假设你们对前面的内容理解了</p><p>阿弥陀佛</p><p>我们已知有上述几种参数的形式，那么在定义函数的时候，这些参数是否是有顺序的呢</p><p>答案是有的</p><p><strong>参数的顺序必须是：必须参数、默认参数、可变参数/命名关键字参数和关键字参数</strong></p><p>详细可以看：<a href="https://www.jianshu.com/p/98f7e34845b5">https://www.jianshu.com/p/98f7e34845b5</a></p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里简单引入驼峰命名法，其实就是justdo不好看hhh</span></span><br><span class="line"><span class="comment"># 驼峰命名法：https://baike.baidu.com/item/骆驼命名法</span></span><br><span class="line">In [<span class="number">49</span>]: <span class="function"><span class="keyword">def</span> <span class="title">just_do</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span></span><br><span class="line">    ...:     print(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]:  just_do(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">&#x27;ext&#x27;</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;手写一个迭代器，不要傻了，在你连函数都不会定义的情况下，我教你手写一个迭代器那是作死。&lt;/p&gt;
&lt;p&gt;迭代器在后方&lt;/p&gt;
&lt;p&gt;我们现在来看看&lt;strong&gt;函数,function&lt;/strong&gt;定义&lt;/p&gt;
&lt;p&gt;啥子叫个函数嘞&lt;/p&gt;
&lt;p&gt;先来看看我对他的简化版定</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.10.迭代器</title>
    <link href="http://example.com/2021/03/01/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.10/"/>
    <id>http://example.com/2021/03/01/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.10/</id>
    <published>2021-03-01T13:40:39.200Z</published>
    <updated>2021-03-07T09:14:47.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器呢，是一种<strong>对象</strong>。。。。</p><blockquote><p>我如何和你们解释<strong>对象</strong>这个比较抽象的词呢（在某些同学仍然单身的情况下hhh）</p></blockquote><blockquote><p>言归正传，编程可以分为两类，面向过程的编程，以及面向对象的编程</p></blockquote><blockquote><p>我们写的一般普通的脚本是面向过程的，因为，处理问题比较简单，应用情景比较单一</p></blockquote><blockquote><p>但是如果对于比较复杂的操作一般会使用面向对象的编程</p></blockquote><blockquote><p>当然，你也可以记住一句话</p></blockquote><blockquote><p><strong>万物皆对象</strong></p></blockquote><p>为了更细致的了解,迭代器，我们先来给他下定义</p><ol><li>迭代器是可迭代的对象</li><li>迭代器只能往前不会后退。</li><li>迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong></li><li>字符串，列表，元组，字典对象都可用于创建迭代器</li><li>你也可以使用循环来进行遍历</li></ol><p>简而言之，一个字符串，列表或元组被迭代化后，他就变成了一个迭代器类似的存在，迭代器可以进行迭代，且只能向前不能向后</p><p>我们看个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a=<span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="built_in">type</span>(b)</span><br><span class="line">Out[<span class="number">10</span>]: str_iterator</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">&#x27;d&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">9</span>-adb3e17b0219&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然列表，元祖也基本一致</span></span><br><span class="line">In [<span class="number">11</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: b = <span class="built_in">iter</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: print(b)</span><br><span class="line">&lt;list_iterator <span class="built_in">object</span> at <span class="number">0x7fc9b8337ed0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="built_in">next</span>(b)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">18</span>-adb3e17b0219&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#当然，如果是字典的话</span></span><br><span class="line">In [<span class="number">19</span>]: a=&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: <span class="built_in">iter</span>(a)</span><br><span class="line">Out[<span class="number">20</span>]: &lt;dict_keyiterator at <span class="number">0x7fc9b8331170</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: d = <span class="built_in">iter</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="built_in">next</span>(d)</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="built_in">next</span>(d)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: <span class="built_in">next</span>(d)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">24</span>-9b2daf1403f5&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(d)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用循环来进行遍历</span></span><br><span class="line">In [<span class="number">20</span>]: b = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>那其实现在，我们就有一个问题，为什么要用迭代器呢？</p><p>话说直接使用<code>for</code>，<code>while</code>循环遍历他不香吗？</p><p>一方面，同学们要了解，迭代的思想和精髓呀，这个你们高中老师就教过了，我就不教了，我们下一谈来直接写一个看看。</p><p>第二方面，迭代器所占的内存更小，我们看个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]:  print(sys.getsizeof(a))</span><br><span class="line"><span class="number">112</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: b = <span class="built_in">iter</span>(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: print(sys.getsizeof(b))</span><br><span class="line"><span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我们使用两种方式创建了a，这个列表，一种是正常方式</span></span><br><span class="line"><span class="comment">#一种是正常方式，在正常方式下，a所占的内存为112字节</span></span><br><span class="line"><span class="comment">#一种是迭代器方式，a所占的内存的为64字节</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以，<strong>迭代器比较香是因为它占据的内存比较小</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h3&gt;&lt;p&gt;迭代器呢，是一种&lt;strong&gt;对象&lt;/strong&gt;。。。。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我如何和你们解释&lt;stron</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.9</title>
    <link href="http://example.com/2021/02/28/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.9/"/>
    <id>http://example.com/2021/02/28/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.9/</id>
    <published>2021-02-28T02:52:23.285Z</published>
    <updated>2021-03-07T09:14:39.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="循环中的一些关键词"><a href="#循环中的一些关键词" class="headerlink" title="循环中的一些关键词"></a>循环中的一些关键词</h3><p>在上面我们已经说了<code>else</code></p><p>现在那么只有三个关键词<code>break, continue,pass</code></p><ol><li><p><code>break</code></p><p><code>break</code> 用于打破循环，想到了悟空，hhh，在循环中，当值满足某个条件值，可以使用<code>break</code>打破此循环，避免执行后续语句，减少计算量</p><p>一般形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: a = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">    ...: <span class="keyword">for</span>   i  <span class="keyword">in</span> a:</span><br><span class="line">    ...: <span class="keyword">if</span> i == <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">    ...:print(<span class="string">&#x27;find d and break&#x27;</span>)</span><br><span class="line">    ...:<span class="keyword">break</span></span><br><span class="line">    ...:print(<span class="string">&#x27;find&#x27;</span>,i)</span><br><span class="line">    ...: print(<span class="string">&#x27;finished&#x27;</span>)</span><br><span class="line">find a</span><br><span class="line">find b</span><br><span class="line">find c</span><br><span class="line">find d <span class="keyword">and</span> <span class="keyword">break</span></span><br><span class="line">finished</span><br></pre></td></tr></table></figure></li><li><p><code>continue</code>用于跳过当前的循环</p><p>当满足你的判断条件时，使用<code>continue</code>可以跳过本次循环，进入下一循环</p><p>我们来看一个实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当我们使用continue时</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: a = <span class="string">&#x27;abcdefg&#x27;</span> </span><br><span class="line">    ...: print(<span class="string">&#x27;continue&#x27;</span>) </span><br><span class="line">    ...: <span class="keyword">for</span> i <span class="keyword">in</span> a: </span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>: </span><br><span class="line">    ...:         <span class="keyword">continue</span> </span><br><span class="line">    ...:     print(<span class="string">&#x27;find &#x27;</span>,i) </span><br><span class="line">    ...:                                                                                                                                                   </span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">find  a</span><br><span class="line">find  b</span><br><span class="line">find  d</span><br><span class="line">find  e</span><br><span class="line">find  f</span><br><span class="line">find  g</span><br><span class="line"><span class="comment"># 可以看出我们跳过了c进行了后续的循环</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们使用break是</span></span><br><span class="line">In [<span class="number">62</span>]: print(<span class="string">&#x27;break&#x27;</span>)</span><br><span class="line">    ...: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">    ...:         <span class="keyword">break</span></span><br><span class="line">    ...:     print(<span class="string">&#x27;find &#x27;</span>,i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">find  a</span><br><span class="line">find  b</span><br><span class="line"><span class="comment"># 可以看出当遇到break时，循环直接被打破</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>pass</code></p><p>pass是空语句，不做任何事情，你可以把它当作一个为了保证程序结构完整性而创造出来的词</p><p>只是为了占个位置，看起来顺眼</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">    ...:         <span class="keyword">pass</span></span><br><span class="line">    ...:     print(<span class="string">&#x27;find &#x27;</span>,i)</span><br><span class="line">    ...:</span><br><span class="line">find  a</span><br><span class="line">find  b</span><br><span class="line">find  c</span><br><span class="line">find  d</span><br><span class="line">find  e</span><br><span class="line">find  f</span><br><span class="line">find  g</span><br><span class="line"><span class="comment"># 可以看出当我们使用pass时，实际上没有发生任何变化，程序会正常执行，循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者下面一个例子</span></span><br><span class="line">In [<span class="number">38</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a: </span><br><span class="line">    ...:     <span class="keyword">if</span> i == <span class="string">&#x27;c&#x27;</span>: </span><br><span class="line">    ...:         <span class="keyword">pass</span> </span><br><span class="line">    ...:     <span class="keyword">else</span>: </span><br><span class="line">    ...:         print(i,<span class="string">&#x27;is not c&#x27;</span>) </span><br><span class="line"><span class="comment"># 当我们在使用pass时，程序不执行任何操作，但当条件不是‘c’时，程序执行print操作                                                                                                                                               </span></span><br><span class="line">a <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">b <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">d <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">e <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">f <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line">g <span class="keyword">is</span> <span class="keyword">not</span> c</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;循环中的一些关键词&quot;&gt;&lt;a href=&quot;#循环中的一些关键词&quot; class=&quot;headerlink&quot; title=&quot;循环中的一些关键词&quot;&gt;&lt;/a&gt;循环中的一些关键词&lt;/h3&gt;&lt;p&gt;在上面我们已经说了&lt;code&gt;else&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在那么只有三个</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.8</title>
    <link href="http://example.com/2021/02/28/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.8/"/>
    <id>http://example.com/2021/02/28/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.8/</id>
    <published>2021-02-28T01:38:07.140Z</published>
    <updated>2021-03-07T09:14:33.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>另外一个常用的循环语句是<code>while</code>,在<code>while</code>语句中只要满足条件，就可以一直循环</p><p>基本形式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 判断语句：</span><br><span class="line">执行语句</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = <span class="number">0</span></span><br><span class="line">In [<span class="number">2</span>]: b = <span class="number">10</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">while</span> a &lt; b :</span><br><span class="line">   ...:     print(a)</span><br><span class="line">   ...:     a = a + <span class="number">1</span></span><br><span class="line">   ...: print(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然利用这个特性，你也可以使用一个死循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="keyword">while</span> a == b:</span><br><span class="line">    ...:     print(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># 此时你可以关闭终端，或者ctrl + c来进行终止</span></span><br></pre></td></tr></table></figure><p>当然<code>while</code>也可以与<code>else</code>联用，个人理解在<code>while</code>执行完成之后，不符合判段条件时，便可以执行<code>else</code>语句</p><p>基本形式为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line"></span><br><span class="line">执行语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line"></span><br><span class="line">执行语句</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: <span class="keyword">while</span> a &lt; b :</span><br><span class="line">    ...:     print(a)</span><br><span class="line">    ...:     a = a + <span class="number">1</span></span><br><span class="line">    ...: <span class="keyword">else</span>:</span><br><span class="line">    ...:     print(<span class="string">&#x27;jump&#x27;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">jump</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h3&gt;&lt;p&gt;另外一个常用的循环语句是&lt;code&gt;while&lt;/code&gt;,在&lt;code&gt;while&lt;/code&gt;语句中只要满足条件，就可以一直循环&lt;/p</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.7</title>
    <link href="http://example.com/2021/02/26/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.7/"/>
    <id>http://example.com/2021/02/26/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.7/</id>
    <published>2021-02-26T12:06:06.109Z</published>
    <updated>2021-03-07T09:14:25.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>循环，是最常用的命令，和判断语句一样，一般情况下，我们将问题或者实际情况进行拆解，分类，然后使用循环以及判断来寻找潜在的解。</p><p>python的循环有两个<code>for</code>以及<code>while</code></p><p>我们先来看<code>for</code>循环</p><p><code>for</code>循环可以遍历字符串，列表，字典等等数据结构。</p><p>一般的情况就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">print(i)</span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">In [<span class="number">1</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">   ...:     print(i)</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">In [<span class="number">3</span>]: a = <span class="string">&#x27;1,2,3,4&#x27;</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">   ...:     print(i)</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">,</span><br><span class="line"><span class="number">2</span></span><br><span class="line">,</span><br><span class="line"><span class="number">3</span></span><br><span class="line">,</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="comment"># 字典会比较复杂，你可以遍历keys，value以及（key，value）</span></span><br><span class="line"><span class="comment"># 我们来遍历key+value</span></span><br><span class="line">In [<span class="number">6</span>]: a = &#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">   ...: <span class="keyword">for</span> i <span class="keyword">in</span> a.items():</span><br><span class="line">   ...:     print(i)</span><br><span class="line">   ...:</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;d&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>或者你可以通过索引来进行遍历，最常见是遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">   ...:     print(a[i])</span><br><span class="line">   ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 让我们来看看整个过程发生了什么</span></span><br><span class="line"><span class="comment"># 当然是用代码来进行表示</span></span><br><span class="line">In [<span class="number">9</span>]: a</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#获取列表长度</span></span><br><span class="line">In [<span class="number">10</span>]: <span class="built_in">len</span>(a)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">4</span></span><br><span class="line"><span class="comment">#使用range函数创建一个整数列表</span></span><br><span class="line">In [<span class="number">11</span>]: <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">#使用for来遍历这个整数列表</span></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ...:     print(i)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#使用索引来遍历列表a中的所有元素</span></span><br><span class="line">In [<span class="number">13</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    ...:     print(a[i])</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>让我们再来看看<code>else</code></p><p><code>else</code>在循环中也可以使用</p><p>我们先来看一个简单的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    ...: <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    ...:     print(x)</span><br><span class="line">    ...: <span class="keyword">else</span>:</span><br><span class="line">    ...:     print(<span class="string">&quot;else&quot;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上例中，我们先使用<code>for</code>遍历了<code>x</code>，执行完成之后，程序执行<code>else</code>语句，打印出<code>print</code></p><p>是不是感觉好像<code>else</code>没有什么用处</p><p>就仿佛。。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    ...: <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    ...:     print(x)</span><br><span class="line">    ...: print(<span class="string">&quot;else&quot;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="keyword">else</span></span><br></pre></td></tr></table></figure><p>恩。。。确实是，我们再来看一个官方例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:             print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:             <span class="keyword">break</span></span><br><span class="line">    ...:     <span class="keyword">else</span>:</span><br><span class="line">    ...:         print(n, <span class="string">&#x27;是一个素数&#x27;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">2</span> 是一个素数</span><br><span class="line"><span class="number">3</span> 是一个素数</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span> 是一个素数</span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line"><span class="number">7</span> 是一个素数</span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>整个过程发生了什么</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们首先使用range函数创造了一个整数列表</span></span><br><span class="line">In [<span class="number">23</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     print(n)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="comment"># 然后我们使用range函数创建了，从2到n的一个整数列表</span></span><br><span class="line">In [<span class="number">26</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     print(<span class="built_in">range</span>(<span class="number">2</span>,n))</span><br><span class="line">    ...:</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line"><span class="comment"># 随后我们来检查是否n处以x等于0</span></span><br><span class="line">In [<span class="number">28</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:            print( <span class="string">&#x27;check&#x27;</span>,n,<span class="string">&#x27;/&#x27;</span>,x,<span class="string">&#x27;=0&#x27;</span>)</span><br><span class="line">    ...:            print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:</span><br><span class="line">check <span class="number">4</span> / <span class="number">2</span> =<span class="number">0</span></span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line">check <span class="number">6</span> / <span class="number">2</span> =<span class="number">0</span></span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line">check <span class="number">6</span> / <span class="number">3</span> =<span class="number">0</span></span><br><span class="line"><span class="number">6</span> 等于 <span class="number">3</span> * <span class="number">2.0</span></span><br><span class="line">check <span class="number">8</span> / <span class="number">2</span> =<span class="number">0</span></span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line">check <span class="number">8</span> / <span class="number">4</span> =<span class="number">0</span></span><br><span class="line"><span class="number">8</span> 等于 <span class="number">4</span> * <span class="number">2.0</span></span><br><span class="line">check <span class="number">9</span> / <span class="number">3</span> =<span class="number">0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br><span class="line"><span class="comment"># 如果我们发现了n除以x等于0</span></span><br><span class="line"><span class="comment"># 例如 check 6 / 2 =0</span></span><br><span class="line"><span class="comment"># 那么打印出6 等于 2 * 3.0</span></span><br><span class="line"><span class="comment"># for x in range(2, n) 被break掉，else不会执行</span></span><br><span class="line">In [<span class="number">29</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:             print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:             <span class="keyword">break</span></span><br><span class="line">    ...:</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br><span class="line"><span class="comment"># 如果我们没有发现n除以x等于0</span></span><br><span class="line"><span class="comment"># 那么执行else</span></span><br><span class="line"><span class="comment"># 打印出3 是个素数</span></span><br><span class="line">In [<span class="number">32</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    ...:     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    ...:         <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">    ...:             print( n, <span class="string">&#x27;等于&#x27;</span>, x, <span class="string">&#x27;*&#x27;</span>, n/x)</span><br><span class="line">    ...:             <span class="keyword">break</span></span><br><span class="line">    ...:     <span class="keyword">else</span>:</span><br><span class="line">    ...:         print(n, <span class="string">&#x27;是个素数&#x27;</span>)</span><br><span class="line">    ...:</span><br><span class="line"><span class="number">2</span> 是个素数</span><br><span class="line"><span class="number">3</span> 是个素数</span><br><span class="line"><span class="number">4</span> 等于 <span class="number">2</span> * <span class="number">2.0</span></span><br><span class="line"><span class="number">5</span> 是个素数</span><br><span class="line"><span class="number">6</span> 等于 <span class="number">2</span> * <span class="number">3.0</span></span><br><span class="line"><span class="number">7</span> 是个素数</span><br><span class="line"><span class="number">8</span> 等于 <span class="number">2</span> * <span class="number">4.0</span></span><br><span class="line"><span class="number">9</span> 等于 <span class="number">3</span> * <span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>其实，写到这里我也有些困了，<code>for </code>和<code>else</code>一起搭的用法确实有些反人类，看看官方的这个例子，也就是在整体的<code>for</code>循环中，又分为两个部分，一个用于判断，如果判断成功则<code>else</code>不被执行，否则执行<code>else</code></p><p>好了，今天就到这里.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot; class=&quot;headerlink&quot; title=&quot;循环&quot;&gt;&lt;/a&gt;循环&lt;/h3&gt;&lt;p&gt;循环，是最常用的命令，和判断语句一样，一般情况下，我们将问题或者实际情况进行拆解，分类，然后使用循环以及判断来寻找潜在的解。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.6</title>
    <link href="http://example.com/2021/02/25/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.6/"/>
    <id>http://example.com/2021/02/25/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.6/</id>
    <published>2021-02-25T13:39:05.784Z</published>
    <updated>2021-03-07T09:14:20.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><p>简单说下就是<code>if</code>判断</p><p><img src="https://i.loli.net/2021/02/25/EHfGhODU4zk9mqx.jpg" alt="cainiaojiaocheng1"></p><p>简单来说下基本形式就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件一：</span><br><span class="line">执行动作一</span><br><span class="line"><span class="keyword">elif</span> 条件二：</span><br><span class="line">执行动作二：</span><br><span class="line"><span class="keyword">else</span> 条件三：</span><br><span class="line">执行动作三</span><br></pre></td></tr></table></figure><p>如果你只需要判断一种条件那么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件一：</span><br><span class="line">执行动作一</span><br></pre></td></tr></table></figure><p>甚至不需要else</p><p>需要注意的是  <code>if</code>判断条件后面需要加<code>：</code></p><p><code>if</code>常和<code>while</code>以及<code>for</code>联用</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从一个列表中用判断某个数字是否存在</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> a:</span><br><span class="line">print(<span class="string">&#x27;1 in a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一个列表中特定数字是否存在</span></span><br><span class="line"><span class="comment"># 创建一个列表，包含`1,2,3,4`四个元素</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="comment">#判断列表元素是否等于1</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">print(<span class="string">&#x27;1 in a&#x27;</span>)</span><br><span class="line"><span class="comment">#判断列表元素是否等于2</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">1</span> &lt; i &lt;  <span class="number">3</span>:</span><br><span class="line">print(<span class="string">&#x27;2 in a&#x27;</span>)</span><br><span class="line"><span class="comment">#如果列表元素既不等于1也不等于2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&#x27;this &gt;= 3&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然列表也可以嵌套，这取决你的解决问题的复杂程度</p><p><strong>你当然可以按照下述操作进行使用</strong></p><p><strong>但是需要注意</strong></p><p><strong>当你的问题达到一个很复杂的程度的时候，使用嵌套方式会加大你的记忆程度，以及程序的使用难度以及设计难度</strong></p><p><strong>而且会使问题的解决方式实际上变得更为复杂，这取决于你的记忆以及编码水平</strong></p><p><strong>同时在这里你应该注意缩进符对python的影响，只要有一个缩进有问题，此程序便不可运行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">    ...:</span><br><span class="line">    ...: <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    ...:<span class="keyword">if</span> <span class="number">1</span>&lt;i&lt;<span class="number">4</span>:</span><br><span class="line">    ...:<span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">    ...:print(<span class="string">&#x27;this is 1 and this &lt; 4&#x27;</span>)</span><br><span class="line">    ...:<span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">    ...:print(<span class="string">&#x27;this is 2 and this &lt; 4&#x27;</span>)</span><br><span class="line">    ...:<span class="keyword">if</span> i &gt; <span class="number">4</span>:</span><br><span class="line">    ...:<span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">    ...:print(<span class="string">&#x27;this is 5 and this &gt; 4&#x27;</span>)</span><br><span class="line">    ...:<span class="keyword">elif</span> i == <span class="number">6</span>:</span><br><span class="line">    ...:print(<span class="string">&#x27;this is 6 and this &gt; 4&#x27;</span>)</span><br><span class="line">    ...:<span class="keyword">else</span>:</span><br><span class="line">    ...:print(<span class="string">&#x27;this is others&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">this <span class="keyword">is</span> <span class="number">2</span> <span class="keyword">and</span> this &lt; <span class="number">4</span></span><br><span class="line">this <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> this &gt; <span class="number">4</span></span><br><span class="line">this <span class="keyword">is</span> <span class="number">6</span> <span class="keyword">and</span> this &gt; <span class="number">4</span></span><br><span class="line">this <span class="keyword">is</span> others</span><br><span class="line">this <span class="keyword">is</span> others</span><br><span class="line">this <span class="keyword">is</span> others</span><br></pre></td></tr></table></figure><p><code>if</code>中常用的一些判断符号</p><table><thead><tr><th align="left">判断符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>&lt;</code></td><td align="left">小于</td></tr><tr><td align="left"><code>&lt;=</code></td><td align="left">小于或等于</td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">大于</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left">大于或等于</td></tr><tr><td align="left"><code>==</code></td><td align="left">等于，比较两个值是否相等</td></tr><tr><td align="left"><code>!=</code></td><td align="left">不等于</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;条件控制&quot;&gt;&lt;a href=&quot;#条件控制&quot; class=&quot;headerlink&quot; title=&quot;条件控制&quot;&gt;&lt;/a&gt;条件控制&lt;/h3&gt;&lt;p&gt;简单说下就是&lt;code&gt;if&lt;/code&gt;判断&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/20</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>2020 年FDA药物总览</title>
    <link href="http://example.com/2021/02/24/paper/2020%20%E5%B9%B4FDA%E8%8D%AF%E7%89%A9%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2021/02/24/paper/2020%20%E5%B9%B4FDA%E8%8D%AF%E7%89%A9%E6%80%BB%E7%BB%93/</id>
    <published>2021-02-24T15:45:34.224Z</published>
    <updated>2021-03-07T09:54:16.802Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Cite:<a href="https://www.nature.com/articles/d41573-021-00002-0">https://www.nature.com/articles/d41573-021-00002-0</a></p></blockquote><p>FDA在2020年批准了53种新药，这是20年以来批准的第二高峰，仅低于2018年批准的59种药物。</p><p>2020年批准的药物是过去十年内批准的两倍多。</p><p>延续最近几年的趋势，癌症产品仍然站住主导地位。医药行业对癌症的关注比以往更为显著。FDA在2020年批准了18种产品（占总体34%），近五年内癌症产品占据25％。神经类药物（Neurology products ）占据第二位，有8种药物获批（占总体15%）。传染病类药物排在第三位，有6种药物获批（占据总体的11%）。</p><p>在治疗方式方面，基于抗体和基于寡核苷酸的疗法（antibody-based and oligonucleotide-based therapeutics）继续拓宽治疗领域。基于抗体治疗的12种药物获得批准，与2018年是此类产品的历史新高。过去五年内每年批准10种。相比之下，2006年至2010年期间，FDA每年仅批准两种新抗体。</p><p>这同样也是一个突破性的一年，在孤儿药，首要疗法，突破性疗法，加速类疗法（orphan and breakthrough designations,accelerated approvals）。FDA批准31种产品（58%）用于治疗罕见疾病，高于5年平均水平46%。批准了22种（42%）具有突破性疗法的产品，这些产品可能比其他可用于治疗严重疾病的产品有实质性的改进。这一比例高于5年平均水平28%。根据替代终点的改进，它批准了12种（23%）的加速疗法，高于过去5年的平均水平16%。然而，对于那些在安全性或有效性方面有显著改善的产品，优先审查（Priority reviews）的次数减少了。</p><p>EvaluatePharma的销售预测显示，到2026年，有11种产品有望实现畅销（表3）。其中四款年销售额可能超过20亿美元。</p><p>但波士顿咨询集团（Boston Consulting Group）的一项分析显示，新获批药物的整体财务未来仍低于平均水平。他们的预测表明，2020年新批准药物的平均预期峰值销售额为7亿美元，中位数为4亿美元。这低于平均水平的13亿美元和5亿美元的中位数。</p><img src="https://i.loli.net/2021/02/24/gQU7k8rBWoubs2Y.png" alt="image-20210224222253753" style="zoom:50%;" /><h3 id="抗体类药物在上升"><a href="#抗体类药物在上升" class="headerlink" title="抗体类药物在上升"></a>抗体类药物在上升</h3><p>抗体类药物共有12项被批准。例如，针对新靶点的抗体偶联类药物（ADC）获得了两项批准。</p><p>Immunomedics公司的sacituzumab govitecan是一种治疗三阴性乳腺癌的TROP2靶向ADC。该公司在2018年首次向FDA提交了这种治疗药物，但该机构在2019年拒绝了。Immunomedics当时表示，推迟是因为生产问题，该公司当年重新提交了该药。</p><p><a href="https://www.immunomedics.com/">Immunomedics</a> 公司的 sacituzumab govitecan是一种治疗乳腺癌的TROP2靶向性ADC药物。该公司在2018年首次向FDA提交了这种治疗药物，但在2019年被拒绝。Immunomedics在当时表示，被拒绝是因为生产问题，该公司在当年重新提交了该药。之后FDA批准了ADC，Gilead以210亿美元收购了Immunomedics，主要是为了获得这种药物。分析师预测，到2026年，sacituzumab govitecan的年销售额将达到<strong>24亿美元</strong>。</p><p>与此同时，葛兰素史克在靶向BCMA癌症疗法的激烈竞争中取得了先发优势。</p><p>BCMA在多发性骨髓瘤细胞上过度表达。可靠的生物验证实验、有限的体外毒性风险以及强大的商业潜力都加大了各界对BCMA的兴趣。药物研发人员正在开发CAR-T疗法、ADC、双特异性抗体和其他BCMA靶向疗法。</p><p>靶向BCMA的CAR-T治疗手段已显示出惊人的疗效，但这些疗法可能面临制造和销售瓶颈。葛兰素史克转而选择了一种ADC belantamab mafodotin（一种能对病人产生广泛疗效的药物）。分析师预测，到2026年，年销售额将达到13亿美元。</p><p>迄今为止，FDA已经批准了9种ADC类药物。在过去两年内，FDA批准了五项。目前仍有两个ADC正在接受FDA的审查，并将在2021年做出决定。</p><p>2020年，针对病毒的单克隆抗体（mAb）产品也获得了两次批准。这些药物Regeneron的atoltivimab、odesivimab和maftivimab（鸡尾酒,算作单一批准）和Ridgeback的ansuvimab，都是针对于埃博拉病毒。</p><p>临床上有多种针对SARS-CoV-2的单克隆抗体。其他一些新型单克隆抗体正在研发，这将会是一场激烈的竞争。</p><p>Lundbeck的eptinezumab是针对CGRP受体的第四种抗体疗法。Biohaven的rimegepant也在2020年获得批准，是第二个被批准的CGRP受体小分子拮抗剂。</p><img src="https://i.loli.net/2021/02/25/lhfmwECO6YMUySG.png" alt="image-20210225222429973" style="zoom:50%;" /><h3 id="小分子大影响"><a href="#小分子大影响" class="headerlink" title="小分子大影响"></a>小分子大影响</h3><p>小分子也在开辟新的治疗领域。罗氏和 Genentech的risdiplam展示了小分子结合RNA靶点的潜力。脊髓性肌萎缩症（SMA）是一种罕见的神经肌肉疾病，可导致运动神经元的进行性破坏。它是由SMN1缺陷引起的，SMN1编码存活运动神经元（SMN）蛋白。2016年，FDA批准了Biogen和Ionis的nusinersen，这是第一种针对SMA的疾病改良疗法。</p><p>Risdiplam是Genentech与SMA基金会和PTC Therapeutics合作开发的一种小分子药物。nusinersen是在临床上给药的，而risdiplam是口服的，可以直接在家里进行给药。SMA是近年来创新的一个比较典型的案例。除了nusinersen之外，2019年，FDA还批准了诺华的Semnogene abeparvovec的基因疗法。</p><p>分析人士预测，到2026年，risdiplam的年销售额将达到20亿美元，这凸显了小分子药物与罕见疾病的紧急治疗方式竞争的潜力。其他公司也在用小分子靶向RNA的策略，专注于剪接调控以外的机会。</p><p>为了控制COVID-19大流行，FDA依靠紧急使用授权（EUAs）来加速一些潜在有用的COVID-19疫苗和候选药物的快速推广。这些授权适用于“可能有效”的产品，这是一种比管理局用于批准的“有效性”标准更低的证据水平。然而，EUA并不是获得FDA批准的长期药品，公司需要继续开发他们的产品以便进行全面的监管审查。</p><p>值得注意的是，12月份，就在SARS-CoV-2病毒出现一年之后，两个候选疫苗获得了EUAs批准。辉瑞和BioNTech的BNT162b2和mRNA-1273都是mRNA疫苗。辉瑞和Moderna都计划在2021年将疫苗提交全面审批，为年底前获得批准铺平道路。</p><p>Gilead的remdesivir显示了EUA转化的速度有多快。FDA5月份首次批准了瑞德西韦（remdesivir）的使用，并于10月份完整审批了该药。</p><p>该机构还对两种新的抗体产品进行了EUAs授权：Regeneron的casirivimab和imdevimab组合，以及礼来的bamlanivimab。</p><p><strong>EUAs授权也彰显了药物快速开发的危险，并引发了对监管过程政治化的担忧。</strong>最值得注意的是，FDA在3月份批准了抗疟药物氯喹和羟基氯喹的EUA，尽管几乎没有证据表明它们对COVID-19有效。而在6月份撤销了EUA，并指出这些药物“不太可能有效治疗COVID-19”。</p><img src="https://i.loli.net/2021/02/25/hMxsJoU4YdVzp1e.png" alt="image-20210225222507881" style="zoom:50%;" /><h3 id="与激酶一起前进"><a href="#与激酶一起前进" class="headerlink" title="与激酶一起前进"></a>与激酶一起前进</h3><p>小分子激酶抑制剂也在发展壮大。FDA去年批准了8种激酶抑制剂，是肿瘤药物批准量的一半。尽管在激酶领域存在竞争，但具有正确药理特性的药物仍有很好的前景。例如，随着FDA批准Blueprint Medicines的PDGFR抑制剂avapritinib治疗胃肠道间质瘤（GISTs），该公司将接手诺华公司的小分子激酶抑制物。</p><p>伊马替尼是少数具有抗PDGFR活性的多激酶抑制剂之一，已用于GIST患者。然而，根据Blueprint的数据，6%的患者有PDGFRA外显子有18个突变，对伊马替尼的反应特别差。基于此，Blueprint开发了avapritinib。该药物是首个被批准用于治疗携带PDGFRA外显子18突变的GIST患者的方法。如果美国每年约有3000例GIST病例，那么这相当于每年约有180名潜在的患者需要avapritinib进行治疗。分析师预测，到2026年，该药的销售额将达到10亿美元。</p><p>礼来的首个RET-选择性激酶抑制剂，selpercatinib获的批准。多激酶抑制剂如赛诺菲的vandetanib和艾塞力克斯的cabozantinib对RET有活性，但这些药物的安全性和持久性被认为是有限的，至少部分是由于它们对其他激酶的活性。礼来公司在2019年收购洛索公司的交易中获得了selpercatinib。selpercatinib首先被批准用于非小细胞肺癌和两种甲状腺癌。。FDA还批准了Blueprint和罗氏RET选择性抑制剂pralsetinib治疗非小细胞肺癌。</p><p><img src="https://i.loli.net/2021/02/26/Q6SfDOeo7brTL5t.png" alt="image-20210225222547885"></p><h2 id="有趣的时代"><a href="#有趣的时代" class="headerlink" title="有趣的时代"></a>有趣的时代</h2><p>吉利德公司的remdesivir首次获得了治疗COVID-19的批准，以前所未有的速度完成了其研发和监管里程碑。</p><p>Remdesivir是一种RNA聚合酶抑制剂，它模拟RNA核苷酸来阻止病毒RNA的合成。这种小分子最初被发现用于丙型肝炎和呼吸道合胞病毒，在2014-2016年西非爆发埃博拉疫情期间，它被重新用作埃博拉的潜在治疗药物。这些试验帮助建立了雷姆德西韦的安全性数据库，但被证明是无效的。</p><p>随着SARS-CoV-2的出现，导致COVID-19的病毒，Gilead很快将remdesivir推进了试验。remdesivir首次试验于2月开始。到5月，FDA已经批准了它的紧急使用授权，允许分发未经批准的候选药物。10月，FDA基于一个NIH赞助的试验和两个Gilead赞助的试验的基础上批准了该药。然而，世界卫生组织领导的一项大型多组试验发现，“对COVID-19住院患者几乎没有影响”。</p><p>分析师目前预测，2021年remdesivir的最高销售额将接近15亿美元，到2025年将降至5亿美元。但这些预测下降得很快，说明了潜在的缺陷。在2020年6月，一些分析师预测年销售额最高可达70亿美元。FDA也批准了紧急情况使用其他几种新型COVID-19候选疫苗的授权，包括疫苗和治疗性抗体（框1）。</p><p>Epizyme的tazemetostat是EZH2的第一个抑制剂，它使组蛋白甲基化以调节转录活性。FDA批准tazemetostat治疗上皮样肉瘤。</p><p>Eiger BioPharmaceuticals的lonafarnib是first-in-clas的farnesyltransferase抑制剂。几十年前，药物研发人员一直致力于这一目标的研究，而艾格的研究是针对一种罕见的早衰症，称为Hutchinson-Gilford早衰综合征（Hutchinson-GilfordProgeria syndrome）。</p><p>Trevena的μ-阿片受体激动剂oliceridine，被批准用于中重度急性疼痛。这种药物曾被誉为GPCR激动剂的典型代表，这种药物激活GPCR的一个子集受体的信号通路。特雷维纳曾希望oliceridine比传统的阿片受体激动剂安全性更好，但该机构表示oliceridine的安全性“与其他阿片类似”。</p><p>吉利德的brexucabtagene autoleucel获批标志着CD19靶向CAR-T细胞治疗的第三个绿灯。这是第一个被批准用于套细胞淋巴瘤的CAR-T细胞疗法。</p><p><img src="/Users/sujiaqi/Pictures/Typora/BbhWv1wX7zJtOHm.png" alt="image-20210226000831191"></p><h2 id="不全是好消息"><a href="#不全是好消息" class="headerlink" title="不全是好消息"></a>不全是好消息</h2><p>一些药物开发商在2020年遭遇了挫折，收到了FDA的完整回复函（表4）。</p><p>AbbVie、Allergan和Molecular Partners的新生血管(湿性)年龄相关性黄斑变性(nAMD)药物abicipar pegol的生物制剂许可申请（BLA）遭到该机构的拒绝这是DARPin（designed ankyrin repeat protein，设计锚蛋白重复序列蛋白）的首次申请，DARPin是一种低分子量的生物形式，旨在与单克隆抗体竞争。但FDA以眼内炎症为由拒绝了该候选药物。</p><p>FDA拒绝了Gilead的JAK抑制剂filgotinib治疗类风湿性关节炎。分析师此前预测，这种消炎药的最高销售额接近15亿美元。但是FDA要求提供更多的安全性数据。EMA在2020年批准了filgotinib。</p><p>FDA还拒绝了诺华和的inclisiran治疗高脂血症，inclisiran是一种能降低PCSK9产量的小干扰RNA制剂。如果获得批准，这种基于寡核苷酸的药物将与两种FDA批准的针对PCSK9的单抗竞争。这些单抗每2-4周给药一次，inclisiran每年给药两次。诺华于2019年斥资97亿美元收购了这家医药公司，以获得这一治疗药物的使用权，并获得了阿林制药公司（Alnylam Pharmaceuticals）的许可。诺华说，拒绝的原因是因为“未解决设施检查相关条件”。EMA于2020年批准了Incisiran。</p><p>Intercept的法尼类 X 受体激动剂阿苯胆酸（obeticholic acid）于2016年首次被FDA批准用于原发性胆管炎，因此对非酒精性脂肪性肝炎（NASH）的补充批准不符合FDA新批准名单的要求。但人们希望这种药物能够获得NASH的批准，这一迹象在过去十年中吸引了许多药物研发人员。然而，FDA拒绝了这一申请，指出“预期的益处……仍然不确定，而且还不足以超过潜在的风险。”</p><p><img src="https://i.loli.net/2021/02/26/CU1EylLRTG69JAI.png" alt="image-20210226000712186"></p><h3 id="新的一年"><a href="#新的一年" class="headerlink" title="新的一年"></a>新的一年</h3><p>面对与COVID-19的影响，很难说工业界和FDA能否同步。FDA通常会在12月份披露今年有多少新药提交了申请，但随着《自然》杂志《药物发现》出版，FDA还没有披露名单。</p><p>一些值得注意的2021年潜在新药批准在2021年位于表5中，例如，百时美施贵宝公司生产的lisocabtagene maraleucel，可能成为第四种推向市场的CAR-T细胞疗法。其他三种FDA批准的CAR-T细胞疗法都是针对CD19表达细胞，而liso cabtagene Maraluecel则针对BCMA。2019年，百时美施贵宝以740亿美元收购Celgene，部分原因是为了获得Celgene/Juno Therapeutics的关于CAR-T细胞的专业知识。由于在COVID-19大流行期间检查生产设施的挑战，FDA推迟了对该申请的审核。</p><p>FDA预计将在2021年3月底前就Biogen的淀粉样β-靶向抗体aducanumab治疗阿尔茨海默病做出决定。Biogen最初报告称，aducanumab在其关键试验中失败，但2019年该公司在重新分析其临床数据后改变了策略。去年11月，一个独立的咨询小组投票反对批准这种抗体。当然，FDA没有义务遵循这一建议。</p><p>Amgen公司的KRAS-G12C抑制剂sotorasib正在接受关于非小细胞肺癌的研究，这是一条针对这一癌症靶点的深入研究路线。</p><p><img src="/Users/sujiaqi/Pictures/Typora/fPBkuWN9K6l7E4L.png" alt="image-20210226000736443"></p><h3 id="新药名单"><a href="#新药名单" class="headerlink" title="新药名单"></a>新药名单</h3><table><thead><tr><th><strong>Drug (brand name)</strong></th><th><strong>Sponsor</strong></th><th><strong>Properties</strong></th><th><strong>Indication</strong></th><th><strong>Review</strong></th></tr></thead><tbody><tr><td>Avapritinib (Ayvakit)</td><td>Blueprint Medicines</td><td>PDGFRA, PDGFRA mutants and KIT kinase inhibitor</td><td>GIST with PDGFRA exon 18 mutations</td><td>P, O, B</td></tr><tr><td>Teprotumumab (Tepezza)a</td><td>Horizon Therapeutics</td><td>IGF1R- directed mAb</td><td>Thyroid eye disease</td><td>P, O, B</td></tr><tr><td>Tazemetostat (Tazverik)</td><td>Epizyme</td><td>EZH2 inhibitor</td><td>Epithelioid sarcoma</td><td>P, O, A</td></tr><tr><td>Lactitol (Pizensy)</td><td>Braintree Labs</td><td>Osmotic laxative</td><td>Chronic idiopathic constipation</td><td>S</td></tr><tr><td>Eptinezumab (Vyepti)a</td><td>Lundbeck</td><td>CGRP- directed mAb</td><td>Migraine</td><td>S</td></tr><tr><td>Bempedoic acid (Nexletol)</td><td>Esperion Therapeutics</td><td>ACL inhibitor</td><td>HeFH or atherosclerotic cardiovascular disease</td><td>S</td></tr><tr><td>Amisulpride (Barhemsys)</td><td>Acacia</td><td>Dopamine D receptor antagonist2</td><td>Nausea and vomiting after surgery</td><td>S</td></tr><tr><td>Rimegepant (Nurtec ODT)</td><td>Biohaven</td><td>CGRP receptor antagonist</td><td>Migraine</td><td>S</td></tr><tr><td>Isatuximab (Sarclisa)a</td><td>Sanofi</td><td>CD38- directed mAb</td><td>Multiple myeloma</td><td>S, O</td></tr><tr><td>Osilodrostat (Isturisa)</td><td>Recordati Rare Diseases</td><td>Cortisol synthesis inhibitor</td><td>Cushing disease</td><td>S, O</td></tr><tr><td>Ozanimod (Zeposia)</td><td>Celgene/Bristol Myers Squibb</td><td>S1P receptor modulator</td><td>Multiple sclerosis</td><td>S</td></tr><tr><td>Selumetinib (Koselugo)</td><td>AstraZeneca</td><td>MEK1/2 kinase inhibitor</td><td>Neurofibromatosis type 1</td><td>P, O, B</td></tr><tr><td>Tucatinib (Tukysa)</td><td>Seagen</td><td>HER2 kinase inhibitor</td><td>HER2- positive breast cancer</td><td>P, O, B</td></tr><tr><td>Pemigatinib (Pemazyre)</td><td>Incyte</td><td>FGFR1-3 kinase inhibitor</td><td>Cholangiocarcinoma</td><td>P, O, B, A</td></tr><tr><td>Sacituzumab govitecan (Trodelvy)a</td><td>Immunomedics/Gilead</td><td>TROP2- directed ADC, with topoisomerase inhibitor</td><td>Triple- negative breast cancer</td><td>P, B, A</td></tr><tr><td>Opicapone (Ongentys)</td><td>Neurocrine</td><td>COMT inhibitor</td><td>Parkinson disease</td><td>S</td></tr><tr><td>Capmatinib (Tabrecta)</td><td>Novartis</td><td>MET kinase inhibitor</td><td>NSCLC</td><td>P, O, B, A</td></tr><tr><td>Selpercatinib (Retevmo)</td><td>Eli Lilly/Loxo Oncology</td><td>RET kinase inhibitor</td><td>RET fusion-positive NSCLC and thyroid cancer</td><td>P, O, B, A</td></tr><tr><td>Ripretinib (Qinlock)</td><td>Deciphera</td><td>KIT and PDGFRA kinase inhibitor</td><td>GIST</td><td>P, O, B</td></tr><tr><td>Fluoroestradiol F-18</td><td>Zionexa</td><td>Radioactive diagnostic</td><td>Imaging, breast cancer</td><td>S</td></tr><tr><td>Artesunate (Artesunate)</td><td>Amivas</td><td>Artemisinin antimalarial</td><td>Severe malaria</td><td>P, O, B</td></tr><tr><td>Flortaucipir F-18</td><td>Eli Lilly</td><td>Radioactive diagnostic</td><td>Imaging, tau in Alzheimer disease</td><td>P</td></tr><tr><td>Inebilizumab (Uplizna)a</td><td>Viela Bio</td><td>CD19- directed mAb</td><td>NMOSD</td><td>S, O, B</td></tr><tr><td>Lurbinectedin (Zepzelca)</td><td>Jazz</td><td>Alkylating drug</td><td>Small- cell lung cancer</td><td>P, O, A</td></tr><tr><td>Triheptanoin (Dojolvi)</td><td>Ultragenyx</td><td>Medium- chain triglyceride</td><td>LC- FAODs</td><td>S, O</td></tr><tr><td>Fostemsavir (Rukobia)</td><td>ViiV Healthcare</td><td>Attachment inhibitor</td><td>HIV</td><td>P, B</td></tr><tr><td>Remimazolam (Byfavo)</td><td>Acacia</td><td>Benzodiazepine</td><td>Procedural sedation</td><td>S</td></tr><tr><td>Cedazuridine; decitabine (Inqovi)</td><td>Otsuka</td><td>Cytidine deaminase inhibitor; nucleoside metabolic inhibitor</td><td>Myelodysplastic syndromes</td><td>P, O</td></tr><tr><td>Abametapir (Xeglyze)</td><td>Dr Reddy’s</td><td>Metalloproteinase inhibitor</td><td>Head lice</td><td>S</td></tr><tr><td>Tafasitamab (Monjuvi)a</td><td>MorphoSys</td><td>CD19- directed mAb</td><td>DLBCL</td><td>P, O, B, A</td></tr><tr><td>Belantamab mafodotin (Blenrep)a</td><td>GlaxoSmithKline</td><td>BCMA- directed ADC, with microtubule inhibitor</td><td>Multiple myeloma</td><td>P, O, B, A</td></tr><tr><td>Nifurtimox (Lampit)</td><td>Bayer</td><td>Nitrofuran antiprotozoal</td><td>Chagas disease</td><td>P, O, A</td></tr><tr><td>Oliceridine (Olinvyk)</td><td>Trevena</td><td>Opioid receptor agonist</td><td>Acute pain</td><td>S</td></tr><tr><td>Risdiplam (Evrysdi)</td><td>Roche/Genentech</td><td>SMN2 splicing modifier</td><td>Spinal muscular atrophy</td><td>P, O</td></tr><tr><td>Viltolarsen (Viltepso)</td><td>Nippon Shinyaku</td><td>Dystrophin splicing modifier</td><td>Duchenne muscular dystrophy</td><td>P, O, A</td></tr><tr><td>Satralizumab (Enspryng)a</td><td>Roche/Genentech</td><td>IL-6R- directed mAb</td><td>NMOSD</td><td>S, O, B</td></tr><tr><td>Clascoterone (Winlevi)</td><td>Cassiopea SpA</td><td>Androgen receptor inhibitor</td><td>Acne vulgaris</td><td>S</td></tr><tr><td>Somapacitan (Sogroya)a</td><td>Novo Nordisk</td><td>Growth hormone analogue</td><td>Growth hormone deficiency</td><td>S</td></tr><tr><td>Copper dotatate Cu-64</td><td>Radiomedix</td><td>Radioactive diagnostic</td><td>Imaging, cancer</td><td>P, O</td></tr><tr><td>Pralsetinib (Gavreto)</td><td>Blueprint Medicines/Roche</td><td>RET kinase inhibitor</td><td>RET fusion-positive NSCLC</td><td>P, O, B, A</td></tr><tr><td>Atoltivimab; odesivimab; maftivimab (Inmazeb)a</td><td>Regeneron</td><td>Cocktail of Ebola glycoprotein- directed mAbs</td><td>Ebola virus</td><td>P, O, B</td></tr><tr><td>Remdesivir (Veklury)</td><td>Gilead</td><td>Nucleotide analogue RNA polymerase inhibitor</td><td>COVID-19</td><td>P</td></tr><tr><td>Lonafarnib (Zokinvy)</td><td>Eiger</td><td>Farnesyltransferase inhibitor</td><td>HGPS</td><td>P, O, B</td></tr><tr><td>Lumasiran (Oxlumo)</td><td>Alnylam</td><td>HAO1- directed siRNA</td><td>Hyperoxaluria type 1</td><td>P, O, B</td></tr><tr><td>Naxitamab (Danyelza)a</td><td>Y- mAbs Therapeutics</td><td>GD2- directed mAb</td><td>High- risk neuroblastoma</td><td>P, O, B, A</td></tr><tr><td>Setmelanotide (Imcivree)</td><td>Rhythm</td><td>MC receptor agonist4</td><td>Rare genetic diseases of obesity</td><td>P, O, B</td></tr><tr><td>PSMA-11 Ga-68</td><td>UCLA</td><td>Radioactive diagnostic</td><td>Imaging, prostate cancer</td><td>S</td></tr><tr><td>Berotralstat (Orladeyo)</td><td>BioCryst</td><td>Plasma kallikrein inhibitor</td><td>Hereditary angioedema</td><td>S, O</td></tr><tr><td>Tirbanibulin (Klisyri)</td><td>Athenex</td><td>Microtubule inhibitor</td><td>Actinic keratosis</td><td>S</td></tr><tr><td>Margetuximab (Margenza)a</td><td>MacroGenics</td><td>HER2- directed mAb</td><td>HER2- positive breast cancer</td><td>S</td></tr><tr><td>Relugolix (Orgovyx)</td><td>Myovant Sciences</td><td>GnRH receptor antagonist</td><td>Prostate cancer</td><td>P</td></tr><tr><td>Ansuvimab (Ebanga)a</td><td>Ridgeback</td><td>Ebola glycoprotein-directed mAb</td><td>Ebola virus</td><td>P, O, B</td></tr><tr><td>Vibegron (Gemtesa)</td><td>Urovant Sciences</td><td>β- adrenoceptor agonist3</td><td>Overactive bladder</td><td>S</td></tr></tbody></table><h3 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h3><p>CDER：the FDA’s Center for Drug Evaluation and Research，FDA药物评价与研究中心</p><p>NMEs：Annual numbers of new molecular entities，新分子实体的年度数量</p><p>BLAs：biologics license applications ，生物制品许可证申请</p><p>CBER：the FDA’s Center for Drug Evaluation and Research，FDA药物评价和研究中心</p><p>Clinical benefit:临床益处，在特定疾病的情况下具有临床意义的积极治疗效果</p><p>Surrogate endpoints：在一些临床试验中，使用替代终点代替临床结果。当临床结果可能需要很长时间来研究时，或者在改善替代终点的临床益处（如控制血压）得到充分理解的情况下，使用替代终点。临床试验需要证明替代终点可以用来预测或关联临床益处。经过这种测试的替代终点被称为已验证的替代终点。2010年至2012年间，FDA批准了45%的基于替代终点的新药。</p><p>Orphan drugs:如果药物/生物制剂用于预防、治疗或诊断某些疾病（此类疾病的患者在美国人数小于200000），则可被认为孤儿药物。</p><p>Orphan designations: 审评用于特定疾病的特定药物，相关激励措施：税收抵免、免除患者费用、FDA批准特定孤儿药用于特定适应症后的7年市场独家经营权</p><p>Breakthrough designations: 突破性审定,一种旨在加速药物开发和审查的过程，与现有的治疗方法相比，该过程可能有实质性的改进。</p><p>Priority designations:优先审定,优先审查指定意味着FDA的目标是在6个月内对申请采取审查。</p><p>Accelerated designations:加速审定，在研究一种新药时，有时可能需要很多年才能了解一种药物是否真的对患者的生存有真正的影响。考虑到这一事实，它可能需要一个较长的时间来衡量一种药物的预期临床效益，在1992年FDA制定了加速审定条例。这些规定允许批准一些治疗严重疾病的药物（这些药物填补了替代终点即可）。</p><p>Fast Track:快速通道,快速通道是一个过程，旨在促进发展，并加快审查药物治疗严重疾病和填补空缺的医疗需求。</p><p>Standard review designation:标准审定,不符合优先审定标准的药物申请。</p><p><a href="https://www.qianzhan.com/analyst/detail/220/201113-3c76e626.html#:~:text=%E6%8A%97%E4%BD%93%E5%81%B6%E8%81%94%E8%8D%AF%E7%89%A9%20%28Antibody-Drug%20Conjugate%EF%BC%8CADC%29%E6%98%AF%E9%87%87%E7%94%A8%E7%89%B9%E5%AE%9A%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%AD%90%E5%B0%86%E6%8A%97%E4%BD%93%E5%92%8C%E5%B0%8F%E5%88%86%E5%AD%90%E7%BB%86%E8%83%9E%E6%AF%92%E8%8D%AF%E7%89%A9%E8%BF%9E%E6%8E%A5%E8%B5%B7%E6%9D%A5%EF%BC%8C%E5%85%B6%E4%B8%BB%E8%A6%81%E7%BB%84%E6%88%90%E6%88%90%E5%88%86%E5%8C%85%E6%8B%AC%E6%8A%97%E4%BD%93%E3%80%81%E8%BF%9E%E6%8E%A5%E5%AD%90%E5%92%8C%E5%B0%8F%E5%88%86%E5%AD%90%E7%BB%86%E8%83%9E%E6%AF%92%E8%8D%AF%E7%89%A9,%28smallmolecular%20cytotoxic%20drug%EF%BC%8CSM%29%E3%80%82%20ADC%E5%88%A9%E7%94%A8%E6%8A%97%E4%BD%93%E4%B8%8E%E9%9D%B6%E6%8A%97%E5%8E%9F%E7%89%B9%E5%BC%82%E6%80%A7%E7%BB%93%E5%90%88%E7%9A%84%E7%89%B9%E7%82%B9%EF%BC%8C%E5%B0%86%E5%B0%8F%E5%88%86%E5%AD%90%E8%8D%AF%E7%89%A9%E9%9D%B6%E5%90%91%E9%80%92%E9%80%81%E8%87%B3%E8%82%BF%E7%98%A4%E7%BB%86%E8%83%9E%E8%BF%9B%E8%80%8C%E5%8F%91%E6%8C%A5%E6%9D%80%E4%BC%A4%E8%82%BF%E7%98%A4%E7%9A%84%E4%BD%9C%E7%94%A8%E3%80%82">ADC</a>：抗体偶联药物(Antibody-Drug Conjugate，ADC)是采用特定的连接子将抗体和小分子细胞毒药物连接起来，其主要组成成分包括抗体、连接子和小分子细胞毒药物(smallmolecular cytotoxic drug，SM)。ADC利用抗体与靶抗原特异性结合的特点，将小分子药物靶向递送至肿瘤细胞进而发挥杀伤肿瘤的作用。</p><p><a href="http://www.yixue.com/CAR-T">CAR-T</a>:全称是Chimeric AntigenReceptor T-Cell Immunotherapy，嵌合<a href="http://www.yixue.com/%E6%8A%97%E5%8E%9F">抗原</a>受体<a href="http://www.yixue.com/T%E7%BB%86%E8%83%9E">T细胞</a>免疫疗法。嵌合<a href="http://www.yixue.com/%E6%8A%97%E5%8E%9F">抗原</a>受体<a href="http://www.yixue.com/T%E7%BB%86%E8%83%9E">T细胞</a>（CAR-<a href="http://www.yixue.com/T%E7%BB%86%E8%83%9E">T细胞</a>）是将能识别某种<a href="http://www.yixue.com/%E8%82%BF%E7%98%A4">肿瘤</a><a href="http://www.yixue.com/%E6%8A%97%E5%8E%9F">抗原</a>的抗体的<a href="http://www.yixue.com/%E6%8A%97%E5%8E%9F">抗原</a>结合部与CD3-ζ链或FcεRIγ的胞内部分在体外偶联为一个嵌合蛋白，通过基因转导的方法转染患者的<a href="http://www.yixue.com/T%E7%BB%86%E8%83%9E">T细胞</a>，使其表达嵌合<a href="http://www.yixue.com/%E6%8A%97%E5%8E%9F">抗原</a>受体(CAR)。患者的<a href="http://www.yixue.com/T%E7%BB%86%E8%83%9E">T细胞</a>被“重编码”后，生成大量<a href="http://www.yixue.com/%E8%82%BF%E7%98%A4">肿瘤</a>特异性的CAR-<a href="http://www.yixue.com/T%E7%BB%86%E8%83%9E">T细胞</a>。这是一个出现了很多年，但是近几年才被改良使用到临床上的新型细胞疗法。和其它免疫疗法类似，它的基本原理就是利用病人自身的免疫细胞来清除癌细胞，但是不同的是，这是一种细胞疗法，而不是一种药。</p><p><a href="https://www.chemsrc.com/CatgBio/3639.html">CGRP receptor</a>:CGRP受体是异源三聚体：具有7个跨膜结构域的大肽，称为降钙素受体样受体（CLR或CRLR），由一种小的单个跨膜肽补充，称为受体活性修饰蛋白（RAMP1），形成CGRP特异性配体结合位点。 CGRP受体由神经，心血管和免疫系统中的多种不同细胞类型表达，这些细胞类型被认为在偏头痛病理学中起重要作用：在脑血管平滑肌上，它们引起血管舒张，在硬脑膜肥大细胞上引发它们的脱颗粒，在中央三叉神经的末端，其中CGRP是脊髓三叉神经尾核和脊髓背角的二阶伤害性神经元的神经调节剂，其中CGRP在诱导对触觉刺激的中枢敏化中具有类似的作用。 CGRP在外周和中枢神经元中产生。它是一种有效的肽血管扩张剂，可以在疼痛的传播中发挥作用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Cite:&lt;a href=&quot;https://www.nature.com/articles/d41573-021-00002-0&quot;&gt;https://www.nature.com/articles/d41573-021-00002-0&lt;/a&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="文献解读" scheme="http://example.com/categories/%E6%96%87%E7%8C%AE%E8%A7%A3%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python每日一谈｜No.5</title>
    <link href="http://example.com/2021/02/24/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.5/"/>
    <id>http://example.com/2021/02/24/python-every-day/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88%EF%BD%9CNo.5/</id>
    <published>2021-02-24T14:04:07.165Z</published>
    <updated>2021-03-07T09:14:15.400Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul><li><p>字典是经常使用的数据结构</p></li><li><p>字典分为key 以及value两部分</p></li><li><p>每个Key都可以对应一个value</p></li><li><p>使用<code>&#123;&#125;</code>来创建字典</p></li><li><p>字典的元素可以是比较任意的类型，例如列表，元祖等</p></li><li><p>字典的一般操作有创建，更新元素，删除元素，添加元素，以及遍历</p></li></ul><p><strong>实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个空字典</span></span><br><span class="line">In [<span class="number">1</span>]: a = &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">type</span>(a)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="built_in">dict</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 当然也可以创建一个非空字典</span></span><br><span class="line">In [<span class="number">4</span>]: b = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: b</span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在b中更新元素</span></span><br><span class="line">In [<span class="number">6</span>]: b[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;Zara&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: b[<span class="string">&#x27;Name&#x27;</span>] = <span class="string">&#x27;Xiaoming&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: b</span><br><span class="line">Out[<span class="number">8</span>]: &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Xiaoming&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在删除b中元素</span></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">del</span> b[<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: b</span><br><span class="line">Out[<span class="number">10</span>]: &#123;<span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在b中添加元素</span></span><br><span class="line">In [<span class="number">11</span>]: b[<span class="string">&#x27;new&#x27;</span>] = <span class="string">&#x27;nihao&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: b</span><br><span class="line">Out[<span class="number">12</span>]: &#123;<span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>, <span class="string">&#x27;new&#x27;</span>: <span class="string">&#x27;nihao&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li>集合是无序的，<strong>不重复的</strong></li><li>使用<code>set()</code>来创建一个集合</li><li>你可以添加元素，也可以删除元素</li><li>集合比较重要的是其运算求交集，并集等等</li></ul><p><strong>实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个集合</span></span><br><span class="line">In [<span class="number">13</span>]: a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">    ...: b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">In [<span class="number">24</span>]: a = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>])</span><br><span class="line">In [<span class="number">26</span>]: b = <span class="built_in">set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line">In [<span class="number">25</span>]: a</span><br><span class="line">Out[<span class="number">25</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: b</span><br><span class="line">Out[<span class="number">27</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: a</span><br><span class="line">Out[<span class="number">14</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: b</span><br><span class="line">Out[<span class="number">15</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ab的交集</span></span><br><span class="line">In [<span class="number">17</span>]: a &amp; b</span><br><span class="line">Out[<span class="number">17</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ab的并集</span></span><br><span class="line">In [<span class="number">16</span>]: a | b</span><br><span class="line">Out[<span class="number">16</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在a中但不在b中的元素</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: a-b</span><br><span class="line">Out[<span class="number">18</span>]: &#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#不在a中不在b中</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: a ^ b</span><br><span class="line">Out[<span class="number">19</span>]: &#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#添加元素</span></span><br><span class="line">In [<span class="number">28</span>]: a.add(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: a</span><br><span class="line">Out[<span class="number">29</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#移除元素</span></span><br><span class="line">In [<span class="number">30</span>]: a.remove(<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: a</span><br><span class="line">Out[<span class="number">31</span>]: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;字典是经常使用的数据结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字典分为key 以及value两部分&lt;/p&gt;
&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="Python每日一谈" scheme="http://example.com/categories/Python%E6%AF%8F%E6%97%A5%E4%B8%80%E8%B0%88/"/>
    
    
  </entry>
  
</feed>
